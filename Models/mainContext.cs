// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace AutoCAC.Models;

public partial class mainContext : DbContext
{
    public mainContext(DbContextOptions<mainContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Adt> Adts { get; set; }

    public virtual DbSet<AuthGroup> AuthGroups { get; set; }

    public virtual DbSet<AuthUser> AuthUsers { get; set; }

    public virtual DbSet<AuthUserGroup> AuthUserGroups { get; set; }

    public virtual DbSet<DataGridTemplate> DataGridTemplates { get; set; }

    public virtual DbSet<Drug> Drugs { get; set; }

    public virtual DbSet<InpatientMedOrder> InpatientMedOrders { get; set; }

    public virtual DbSet<MenuBuild> MenuBuilds { get; set; }

    public virtual DbSet<MenuBuildMetum> MenuBuildMeta { get; set; }

    public virtual DbSet<Ndf> Ndfs { get; set; }

    public virtual DbSet<NightShiftRotation> NightShiftRotations { get; set; }

    public virtual DbSet<NurseCompoundTraining> NurseCompoundTrainings { get; set; }

    public virtual DbSet<OrderDialog> OrderDialogs { get; set; }

    public virtual DbSet<OrderMenu> OrderMenus { get; set; }

    public virtual DbSet<Patient> Patients { get; set; }

    public virtual DbSet<PharmacyOrderableItem> PharmacyOrderableItems { get; set; }

    public virtual DbSet<VwNdcLookup> VwNdcLookups { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Adt>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ADT__3213E83FDBE06C19");

            entity.ToTable("ADT");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AdmitDateTime).HasColumnType("datetime");
            entity.Property(e => e.AdmittingProvider).IsUnicode(false);
            entity.Property(e => e.AttendingPhysician).IsUnicode(false);
            entity.Property(e => e.ChartNumber).IsUnicode(false);
            entity.Property(e => e.Diagnosis).IsUnicode(false);
            entity.Property(e => e.DischargeDateTime).HasColumnType("datetime");
            entity.Property(e => e.EnteredDateTime).HasColumnType("datetime");
            entity.Property(e => e.LastModified).HasColumnType("datetime");
            entity.Property(e => e.Patient).IsUnicode(false);
            entity.Property(e => e.PatientId).HasColumnName("PatientID");
            entity.Property(e => e.RoomBed).IsUnicode(false);
            entity.Property(e => e.Transaction).IsUnicode(false);
            entity.Property(e => e.VisitId)
                .IsUnicode(false)
                .HasColumnName("VisitID");
            entity.Property(e => e.WardAtDischarge).IsUnicode(false);
            entity.Property(e => e.WardLocation).IsUnicode(false);

            entity.HasOne(d => d.PatientNavigation).WithMany(p => p.Adts)
                .HasForeignKey(d => d.PatientId)
                .HasConstraintName("FK_ADT_PatientId");
        });

        modelBuilder.Entity<AuthGroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__auth_gro__3213E83FC1044636");

            entity.ToTable("auth_group");

            entity.HasIndex(e => e.Name, "auth_group_name_a6ea08ec_uniq").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .HasColumnName("name");
        });

        modelBuilder.Entity<AuthUser>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__auth_use__3213E83F5DF4B627");

            entity.ToTable("auth_user");

            entity.HasIndex(e => e.Username, "auth_user_username_6821ab7c_uniq").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DateJoined).HasColumnName("date_joined");
            entity.Property(e => e.Email)
                .HasMaxLength(254)
                .HasColumnName("email");
            entity.Property(e => e.FirstName)
                .HasMaxLength(150)
                .HasColumnName("first_name");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.IsStaff).HasColumnName("is_staff");
            entity.Property(e => e.IsSuperuser).HasColumnName("is_superuser");
            entity.Property(e => e.LastLogin).HasColumnName("last_login");
            entity.Property(e => e.LastName)
                .HasMaxLength(150)
                .HasColumnName("last_name");
            entity.Property(e => e.Password)
                .HasMaxLength(128)
                .HasColumnName("password");
            entity.Property(e => e.Username)
                .HasMaxLength(150)
                .HasColumnName("username");
        });

        modelBuilder.Entity<AuthUserGroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__auth_use__3213E83FFFAA0339");

            entity.ToTable("auth_user_groups");

            entity.HasIndex(e => e.GroupId, "auth_user_groups_group_id_97559544");

            entity.HasIndex(e => e.UserId, "auth_user_groups_user_id_6a12ed8b");

            entity.HasIndex(e => new { e.UserId, e.GroupId }, "auth_user_groups_user_id_group_id_94350c0c_uniq")
                .IsUnique()
                .HasFilter("([user_id] IS NOT NULL AND [group_id] IS NOT NULL)");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.Group).WithMany(p => p.AuthUserGroups)
                .HasForeignKey(d => d.GroupId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("auth_user_groups_group_id_97559544_fk_auth_group_id");

            entity.HasOne(d => d.User).WithMany(p => p.AuthUserGroups)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("auth_user_groups_user_id_6a12ed8b_fk_auth_user_id");
        });

        modelBuilder.Entity<DataGridTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__DataGrid__3214EC072ACDA0C4");

            entity.HasIndex(e => new { e.CreatedBy, e.DataGridName }, "IX_DataGridTemplates_CreatedBy");

            entity.HasIndex(e => new { e.CreatedBy, e.DataGridName, e.TemplateName }, "UX_DataGridTemplates_User_Grid_Name").IsUnique();

            entity.Property(e => e.CreatedBy).HasMaxLength(225);
            entity.Property(e => e.DataGridName).HasMaxLength(225);
            entity.Property(e => e.TemplateName).HasMaxLength(225);
        });

        modelBuilder.Entity<Drug>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Drug__3213E83F85628773");

            entity.ToTable("Drug");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ApplicationPackage).IsUnicode(false);
            entity.Property(e => e.BenchmarkPricePerDispenseUnit).IsUnicode(false);
            entity.Property(e => e.DeaSpcl).IsUnicode(false);
            entity.Property(e => e.DispenseUnit).IsUnicode(false);
            entity.Property(e => e.DispenseUnitsPerOrderUnit).IsUnicode(false);
            entity.Property(e => e.DosageForm).IsUnicode(false);
            entity.Property(e => e.DrugClass).IsUnicode(false);
            entity.Property(e => e.Generic).IsUnicode(false);
            entity.Property(e => e.InactiveDate).HasColumnType("datetime");
            entity.Property(e => e.LocalPossibleDosage).IsUnicode(false);
            entity.Property(e => e.Message).IsUnicode(false);
            entity.Property(e => e.Name).IsUnicode(false);
            entity.Property(e => e.NcpdpDispenseUnit).IsUnicode(false);
            entity.Property(e => e.Ndc).IsUnicode(false);
            entity.Property(e => e.Nf)
                .IsUnicode(false)
                .HasColumnName("NF");
            entity.Property(e => e.OrderUnit).IsUnicode(false);
            entity.Property(e => e.PackageSize).IsUnicode(false);
            entity.Property(e => e.PackageType).IsUnicode(false);
            entity.Property(e => e.PharmacyOrderableItem).IsUnicode(false);
            entity.Property(e => e.PharmacyOrderableItemId)
                .IsUnicode(false)
                .HasColumnName("PharmacyOrderableItemID");
            entity.Property(e => e.PossibleDosages).IsUnicode(false);
            entity.Property(e => e.PricePerDispenseUnit).IsUnicode(false);
            entity.Property(e => e.PricePerOrderUnit).IsUnicode(false);
            entity.Property(e => e.Restriction).IsUnicode(false);
            entity.Property(e => e.RxCui)
                .IsUnicode(false)
                .HasColumnName("RxCUI");
            entity.Property(e => e.Strength).IsUnicode(false);
            entity.Property(e => e.Synonym).IsUnicode(false);
            entity.Property(e => e.Unit).IsUnicode(false);
            entity.Property(e => e.VaPrintName).IsUnicode(false);
        });

        modelBuilder.Entity<InpatientMedOrder>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("InpatientMedOrder");

            entity.Property(e => e.AppointmentDateTime).HasColumnType("datetime");
            entity.Property(e => e.ChartNumber).IsUnicode(false);
            entity.Property(e => e.DosageOrdered).IsUnicode(false);
            entity.Property(e => e.DoseOrRate).IsUnicode(false);
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Imo).HasColumnName("IMO");
            entity.Property(e => e.Instructions).IsUnicode(false);
            entity.Property(e => e.Location).IsUnicode(false);
            entity.Property(e => e.LoginDateTime).HasColumnType("datetime");
            entity.Property(e => e.MedRoute).IsUnicode(false);
            entity.Property(e => e.OrderType)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.OrderableItem).IsUnicode(false);
            entity.Property(e => e.PatientId)
                .IsUnicode(false)
                .HasColumnName("PatientID");
            entity.Property(e => e.PatientName).IsUnicode(false);
            entity.Property(e => e.PharmacyOrderableItemId)
                .IsUnicode(false)
                .HasColumnName("PharmacyOrderableItemID");
            entity.Property(e => e.Provider).IsUnicode(false);
            entity.Property(e => e.ProviderComments).IsUnicode(false);
            entity.Property(e => e.Remarks).IsUnicode(false);
            entity.Property(e => e.Schedule).IsUnicode(false);
            entity.Property(e => e.StartDateTime).HasColumnType("datetime");
            entity.Property(e => e.StopDateTime).HasColumnType("datetime");
            entity.Property(e => e.VerifiedDateTime).HasColumnType("datetime");
            entity.Property(e => e.VerifyingPharmacist).IsUnicode(false);
        });

        modelBuilder.Entity<MenuBuild>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__MenuBuil__3214EC07338C1A0A");

            entity.ToTable("MenuBuild");

            entity.HasIndex(e => new { e.MenuId, e.RowNum, e.ColNum }, "UQ_MenuBuild_MenuRowCol").IsUnique();

            entity.Property(e => e.AdditionalDetails).HasMaxLength(255);
            entity.Property(e => e.DisplayOnly).HasMaxLength(50);
            entity.Property(e => e.DisplayText).HasMaxLength(255);
            entity.Property(e => e.ItemId).HasColumnName("Item_id");
            entity.Property(e => e.MenuId).HasColumnName("Menu_id");
            entity.Property(e => e.Mnemonic).HasMaxLength(4);
            entity.Property(e => e.RowVersion)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Item).WithMany(p => p.MenuBuilds)
                .HasForeignKey(d => d.ItemId)
                .HasConstraintName("FK_MenuBuildItem_OrderDialog");

            entity.HasOne(d => d.Menu).WithMany(p => p.MenuBuilds)
                .HasForeignKey(d => d.MenuId)
                .HasConstraintName("FK_MenuBuild_MenuBuildMeta");
        });

        modelBuilder.Entity<MenuBuildMetum>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__MenuBuil__3213E83F297792AB");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Columns).HasDefaultValue((byte)3);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.DisplayText).IsUnicode(false);
            entity.Property(e => e.Name).IsUnicode(false);
            entity.Property(e => e.RequestStatus)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValue("NEW");
            entity.Property(e => e.RowVersion)
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.ExistingMenuNavigation).WithMany(p => p.MenuBuildMeta)
                .HasForeignKey(d => d.ExistingMenu)
                .HasConstraintName("FK_MenuBuildMeta_ExistingMenu");
        });

        modelBuilder.Entity<Ndf>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__NDF__3213E83F3D09905B");

            entity.ToTable("NDF");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Dea).IsUnicode(false);
            entity.Property(e => e.DispenseUnit).IsUnicode(false);
            entity.Property(e => e.Generic).IsUnicode(false);
            entity.Property(e => e.InactiveDate).HasColumnType("datetime");
            entity.Property(e => e.Ndc)
                .IsUnicode(false)
                .HasColumnName("NDC");
            entity.Property(e => e.PackageSize).IsUnicode(false);
            entity.Property(e => e.PackageType).IsUnicode(false);
            entity.Property(e => e.PrintName).IsUnicode(false);
            entity.Property(e => e.ProductName).IsUnicode(false);
        });

        modelBuilder.Entity<NightShiftRotation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__NightShi__3214EC07E8BD3384");

            entity.ToTable("NightShiftRotation");

            entity.Property(e => e.StaffUserName)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<NurseCompoundTraining>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__NurseCom__3214EC07DEC1F7E8");

            entity.ToTable("NurseCompoundTraining");

            entity.Property(e => e.Department)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.StaffUserName)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<OrderDialog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__OrderDia__3213E83F092BEE58");

            entity.ToTable("OrderDialog");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.DisplayGroup).IsUnicode(false);
            entity.Property(e => e.DisplayText).IsUnicode(false);
            entity.Property(e => e.Items).IsUnicode(false);
            entity.Property(e => e.Name).IsUnicode(false);
            entity.Property(e => e.Package).IsUnicode(false);
            entity.Property(e => e.Responses).IsUnicode(false);
            entity.Property(e => e.Type).IsUnicode(false);
        });

        modelBuilder.Entity<OrderMenu>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("OrderMenu");

            entity.Property(e => e.DisplayOnly).HasMaxLength(4000);
            entity.Property(e => e.DisplayText).HasMaxLength(4000);
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Item).HasMaxLength(4000);
            entity.Property(e => e.ItemDisplay).IsUnicode(false);
            entity.Property(e => e.Mnemonic).HasMaxLength(4000);
            entity.Property(e => e.OrderDialogId)
                .HasMaxLength(4000)
                .HasColumnName("OrderDialogID");
            entity.Property(e => e.Seq).HasMaxLength(4000);
        });

        modelBuilder.Entity<Patient>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Patient__3213E83F57C79012");

            entity.ToTable("Patient");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Age).IsUnicode(false);
            entity.Property(e => e.AttendingPhysician).IsUnicode(false);
            entity.Property(e => e.CellNumber).IsUnicode(false);
            entity.Property(e => e.ChartNumber).IsUnicode(false);
            entity.Property(e => e.CurrentAdmission).HasColumnType("datetime");
            entity.Property(e => e.CurrentMovement).HasColumnType("datetime");
            entity.Property(e => e.DateEnteredIntoFile).IsUnicode(false);
            entity.Property(e => e.DateOfDeath).HasColumnType("datetime");
            entity.Property(e => e.Diagnosis).IsUnicode(false);
            entity.Property(e => e.Dob)
                .HasColumnType("datetime")
                .HasColumnName("DOB");
            entity.Property(e => e.HomePhone).IsUnicode(false);
            entity.Property(e => e.Last4).IsUnicode(false);
            entity.Property(e => e.Name).IsUnicode(false);
            entity.Property(e => e.Pcp)
                .IsUnicode(false)
                .HasColumnName("PCP");
            entity.Property(e => e.Race).IsUnicode(false);
            entity.Property(e => e.Remarks).IsUnicode(false);
            entity.Property(e => e.RoomBed).IsUnicode(false);
            entity.Property(e => e.Sex).IsUnicode(false);
            entity.Property(e => e.Veteran).IsUnicode(false);
            entity.Property(e => e.WardLocation).IsUnicode(false);
            entity.Property(e => e.WorkPhone).IsUnicode(false);
            entity.Property(e => e.ZipCode).IsUnicode(false);
        });

        modelBuilder.Entity<PharmacyOrderableItem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Pharmacy__3213E83F86EA7B67");

            entity.ToTable("PharmacyOrderableItem");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.AlertMsg).IsUnicode(false);
            entity.Property(e => e.AssociatedImmunization).IsUnicode(false);
            entity.Property(e => e.DayOrDoseLimit).IsUnicode(false);
            entity.Property(e => e.DefaultMedRoute).IsUnicode(false);
            entity.Property(e => e.DosageForm).IsUnicode(false);
            entity.Property(e => e.FormularyStatus).IsUnicode(false);
            entity.Property(e => e.InactiveDate).IsUnicode(false);
            entity.Property(e => e.IvFlag).IsUnicode(false);
            entity.Property(e => e.MedRoutes).IsUnicode(false);
            entity.Property(e => e.OrderableName).IsUnicode(false);
            entity.Property(e => e.PatientInstructions).IsUnicode(false);
            entity.Property(e => e.Schedule).IsUnicode(false);
            entity.Property(e => e.ScheduleType).IsUnicode(false);
            entity.Property(e => e.Synonym).IsUnicode(false);
        });

        modelBuilder.Entity<VwNdcLookup>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_NdcLookup");

            entity.Property(e => e.CurrentIen).HasColumnName("CurrentIEN");
            entity.Property(e => e.CurrentNdc)
                .IsUnicode(false)
                .HasColumnName("CurrentNDC");
            entity.Property(e => e.Dea).IsUnicode(false);
            entity.Property(e => e.DispenseUnit).IsUnicode(false);
            entity.Property(e => e.DrugFileName).IsUnicode(false);
            entity.Property(e => e.Generic).IsUnicode(false);
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.InactiveDate).HasColumnType("datetime");
            entity.Property(e => e.Ndc)
                .IsUnicode(false)
                .HasColumnName("NDC");
            entity.Property(e => e.NdfInactiveDate).HasColumnType("datetime");
            entity.Property(e => e.PackageSize).IsUnicode(false);
            entity.Property(e => e.PackageType).IsUnicode(false);
            entity.Property(e => e.PrintName).IsUnicode(false);
            entity.Property(e => e.ProductName).IsUnicode(false);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}