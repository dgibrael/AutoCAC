@page "/githubtoken"
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService
@inject IDbContextFactory<mainContext> DbFactory
@using AutoCAC.Models
@using AutoCAC.Extensions
@using Microsoft.EntityFrameworkCore
@inject AutoCAC.Services.UserContextService UserContext

<PageTitle>Github Token</PageTitle>

<AuthorizedGroups Groups=@(new[] { "PharmacistSupervisor" })>
    <EditForm Model="@this" OnValidSubmit="HandleSubmit">
        <InputText @bind-Value="InputValue" class="form-control" />
        <button type="submit" class="btn btn-primary">Submit</button>
    </EditForm>
</AuthorizedGroups>

@code {
    [CascadingParameter(Name = "MainLayout")] public MainLayout Layout { get; set; }
    public string InputValue { get; set; }
    private async Task HandleSubmit()
    {
        if (string.IsNullOrWhiteSpace(InputValue))
            return;
        await DbFactory.ExecuteSqlAsync($@"
        MERGE INTO AppSettings AS target
        USING (SELECT 'GithubGistToken' AS SettingName, {InputValue} AS SettingValue) AS source
            ON target.SettingName = source.SettingName
        WHEN MATCHED THEN 
            UPDATE SET SettingValue = source.SettingValue
        WHEN NOT MATCHED THEN
            INSERT (SettingName, SettingValue) VALUES (source.SettingName, source.SettingValue);");
    }
}