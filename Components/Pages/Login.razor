@page "/login"

@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService
@using AutoCAC.Components.Templates

<PageTitle>Login</PageTitle>

<EditForm OnValidSubmit="HandleLogin" EditContext="_editContext">
    <div>
        <label>Access Code:</label><br />
        <InputText @bind-Value="AccessCodeInput" type="password" required/>
    </div>
    <div class="mt-2">
        <label>Verify Code:</label><br />
        <InputText @bind-Value="VerifyCodeInput" type="password" required />
    </div>
    <div class="mt-3">
        <button class="btn btn-primary" type="submit">Login</button>
    </div>
</EditForm>
<VwNdcLookups />

@code {
    [CascadingParameter(Name = "MainLayout")] public MainLayout mainLayout { get; set; }
    private MainLayout Layout => mainLayout ?? new MainLayout();
    private bool _isLoading;
    public bool isLoading
    {
        get => _isLoading;
        set
        {
            _isLoading = value;
            InvokeAsync(async () =>
            {
                StateHasChanged();
                await Task.Yield();
            });
        }
    }
    [Parameter]
    [SupplyParameterFromQuery]
    public string ReturnUrl { get; set; } = "/"; // default to home

    protected override void OnInitialized()
    {
        var uri = new Uri(NavigationManager.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
        if (query.TryGetValue("ReturnUrl", out var target))
        {
            ReturnUrl = "/" + target.ToString().TrimStart('/');
        }
        Layout.isLoading = false;
    }


    private EditContext _editContext = new(new object());

    private char[] accessCodeChars;
    private char[] verifyCodeChars;

    public string AccessCodeInput
    {
        get => accessCodeChars?.Length > 0 ? "********" : null;
        set
        {
            if (!string.IsNullOrEmpty(value))
            {
                accessCodeChars = value.ToCharArray();
            }
        }
    }

    public string VerifyCodeInput
    {
        get => verifyCodeChars?.Length > 0 ? "********" : null;
        set
        {
            if (!string.IsNullOrEmpty(value))
            {
                verifyCodeChars = value.ToCharArray();
            }
        }
    }

    private async Task HandleLogin()
    {
        try
        {
            Layout.isLoading = true;
            await Task.Run(() =>
            {
                Layout.RPMS.Login(accessCodeChars.AsSpan(), verifyCodeChars.AsSpan());
            });

            NavigationManager.NavigateTo(ReturnUrl ?? "/");
        }
        catch (Exception ex)
        {
            Layout!.ErrorMessage = ex.Message;
            Layout.isLoading = false;
        }
        finally
        {
            Array.Clear(accessCodeChars, 0, accessCodeChars.Length);
            Array.Clear(verifyCodeChars, 0, verifyCodeChars.Length);
        }
    }
}

