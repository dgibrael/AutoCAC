@page "/drugenteredit"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService
@inject IDbContextFactory<mainContext> DbFactory
@using AutoCAC.Components.Templates
@using AutoCAC.Models
@using Microsoft.EntityFrameworkCore

<PageTitle>Drug Enter Edit</PageTitle>

<EditForm Model="@this" OnValidSubmit="SearchNdc">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="ndcInput">Enter NDC:</label>
        <InputText id="ndcInput" class="form-control" @bind-Value="ndcInput" />
    </div>

    <button type="submit" class="btn btn-primary">Search</button>
</EditForm>



<RPMSOutput />

@code {
    [CascadingParameter(Name = "MainLayout")] public MainLayout mainLayout { get; set; }
    private MainLayout Layout => mainLayout ?? new MainLayout();

    private string ndcInput = string.Empty;
    private List<VwNdcLookup>? lookupResults;
    private bool searchAttempted = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (!Layout.RPMS.IsConnected) return;
            try
            {
                Layout.RPMS.Menu();
            }
            catch (Exception ex)
            {
                Layout!.ErrorMessage = ex.Message;
            }
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task SearchNdc()
    {
        searchAttempted = true;
        using var context = await DbFactory.CreateDbContextAsync();

        lookupResults = await context.VwNdcLookups
            .Where(x => x.Ndc == ndcInput)
            .ToListAsync();
    }
}

