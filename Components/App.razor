@inject NavigationManager NavigationManager
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="@NavigationManager.BaseUri" />
    <RadzenTheme @rendermode="@InteractiveServer" Theme="material" />
    <link rel="stylesheet" href="css/site.css" />
    <link rel="stylesheet" href="css/xterm.min.css" />
    <link rel="icon" href="favicon.ico" />
    <HeadOutlet @rendermode="@InteractiveServer" />
</head>

<body>
    <Routes @rendermode="@InteractiveServer" />
    <script src="_framework/blazor.web.js"></script>
    <script src="_content/Radzen.Blazor/Radzen.Blazor.js?v=@(typeof(Radzen.Colors).Assembly.GetName().Version)"></script>
    <script src="js/xterm.min.js"></script>
    <script>
        let rpmsTerm = new Terminal({ convertEol: true, fontSize: 14 });
        
        window.writeRPMSXterm = function (text) {
        const divId = "rpmsOutputTxtDiv";
        const container = document.getElementById(divId);
        if (!container) {
        console.warn("Target div not found:", divId);
        return;
        }
        if (!rpmsTerm._core || !rpmsTerm._core._renderService?.dimensions) {
            rpmsTerm.open(container);
        }
        rpmsTerm.write(text);
        };

        window.clearRPMSXterm = function () {
            if (rpmsTerm) {
                rpmsTerm.clear();
            } else {
                console.warn("Terminal not initialized.");
            }
        };
    </script>
</body>

</html>

@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; }

    [Inject]
    private ThemeService ThemeService { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (HttpContext != null)
        {
            var theme = HttpContext.Request.Cookies["AutoCACTheme"];

            if (!string.IsNullOrEmpty(theme))
            {
                ThemeService.SetTheme(theme, false);
            }
        }
    }
}
