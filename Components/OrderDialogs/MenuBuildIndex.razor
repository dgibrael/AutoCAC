@page "/menubuild"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService
@inject LoadDataGridService LoadDataGridService
@using AutoCAC.Models
@using Microsoft.EntityFrameworkCore
@using AutoCAC.Extensions
@inject IDbContextFactory<AutoCAC.Models.mainContext> DbFactory
@inject AutoCAC.Services.UserContextService UserContext

<RadzenStack>
    <RadzenRow AlignItems="AlignItems.Center">
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenText Text="Menu Builder" TextStyle="TextStyle.H3" TagName="TagName.H1" style="margin: 0" />
        </RadzenColumn>
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.5rem">
                <RadzenButton Icon="add_circle_outline" Text="Add" Click="@AddButtonClick" Variant="Variant.Flat" />
                <RadzenButton Text="Download" Click="@DownloadTbl" Icon="download" ButtonStyle="ButtonStyle.Base"/>
                <RadzenButton Text="@(showAll ? "Show Mine" : "Show All")" Click="@ToggleShowAll" Icon="visibility" ButtonStyle="ButtonStyle.Base" />
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
    <RadzenRow>
        <RadzenDataGrid @ref="grid0" TItem="AutoCAC.Models.MenuBuildMetum" Data="@data" Count="@count" LoadData="@LoadData"
        AllowPaging="true" ShowPagingSummary="true" PageSizeOptions=@(new int[]{5, 10, 20, 30, 50}) ColumnWidth="200px"
        FilterMode="FilterMode.CheckBoxList" AllowFiltering="true" AllowSorting="true" LoadColumnFilterData="@LoadColumnFilterData">
            <Columns>
                <RadzenDataGridColumn TItem="AutoCAC.Models.MenuBuildMetum" Property="DisplayText" Title="Display Name" FilterMode="FilterMode.Simple"
                FilterPlaceholder="Search by Name..." />
                <RadzenDataGridColumn TItem="AutoCAC.Models.MenuBuildMetum" Property="RequestStatus" Title="Status" />
                <RadzenDataGridColumn TItem="AutoCAC.Models.MenuBuildMetum" Property="CreatedBy" Title="Created By" />
                <RadzenDataGridColumn TItem="AutoCAC.Models.MenuBuildMetum" Title="Actions" Sortable="false" Filterable="false">
                    <Template Context="data">
                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Base" Size="ButtonSize.Small"
                                        Click="@(async args => await EditRow(data))" />
                        @if (UserContext?.Username == data.CreatedBy || UserContext?.IsInGroupOrSuperuser()==true)
                        {
                            <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Small"
                                          Click="@(async args => await DeleteRow(data))" />
                        }
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </RadzenRow>
</RadzenStack>

@code {
    [CascadingParameter(Name = "MainLayout")] public MainLayout Layout { get; set; }
    protected IEnumerable<AutoCAC.Models.MenuBuildMetum> data;
    protected int count = 0;
    protected RadzenDataGrid<AutoCAC.Models.MenuBuildMetum> grid0;
    private IQueryable<MenuBuildMetum> lastQry;
    private LoadDataArgs lastArgs;
    private bool showAll = false;
    protected async Task LoadData(LoadDataArgs args)
    {
        await Layout.SetLoading(true);
        await using var db = await DbFactory.CreateDbContextAsync();
        var query = db.MenuBuildMeta.AsNoTracking();
        if (!showAll)
        {
            query = query.Where(x => x.CreatedBy == UserContext.Username);
        }
        lastQry = query;
        lastArgs = args;
        var result = await LoadDataGridService.ApplyLoadData(query, args, true);
        data = result.Data;
        count = result.Count;
        await Layout.SetLoading(false);
    }

    private async Task ToggleShowAll()
    {
        showAll = !showAll;
        await grid0.FirstPage(true);
    }

    private ColumnFilterChoices<AutoCAC.Models.MenuBuildMetum> _filterChoices;
    
    private async Task LoadColumnFilterData(DataGridLoadColumnFilterDataEventArgs<AutoCAC.Models.MenuBuildMetum> args)
    {
        args.Top = null;
        args.Skip = null;
        await using var db = await DbFactory.CreateDbContextAsync();
        var qry = db.MenuBuildMeta.AsQueryable().AsNoTracking();
        _filterChoices ??= new ColumnFilterChoices<AutoCAC.Models.MenuBuildMetum>();
        await _filterChoices.GetColumnFilterDataAsync(args, qry);
    }

    protected async Task EditRow(AutoCAC.Models.MenuBuildMetum args)
    {
        NavigationManager.NavigateTo($"menubuild/{args.Id}");
    }

    protected async Task AddButtonClick(MouseEventArgs args)
    {
        NavigationManager.NavigateTo("menubuild/new");
    }

    private Task DownloadTbl() 
    { 
        var args = lastArgs ?? new LoadDataArgs(); 
        return lastQry.DownloadAsCsvAsync(args, JSRuntime); 
    }

    private async Task DeleteRow(AutoCAC.Models.MenuBuildMetum item)
    {
        var confirmDelete = await DialogService.Confirm("Are you sure you want to delete this request?");
        if (confirmDelete != true) return;
        await using var db = await DbFactory.CreateDbContextAsync();
        db.MenuBuildMeta.Remove(item);
        await db.SaveChangesAsync();
        await grid0.FirstPage(true);
    }
}
