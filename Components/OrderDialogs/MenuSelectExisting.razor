@using AutoCAC.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.Data.SqlClient
@using System.Text.Json
@using AutoCAC.Extensions
@inject IDbContextFactory<mainContext> DbFactory
@inject LoadDataGridService LoadDataGridService
@inject DialogService DialogService
@inject NotificationService NotificationService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService

<RadzenStack>
    <RadzenHeading Size="H5" Text="Select Order Dialog to insert or enter a description in the field at the bottom" />
    <RadzenTextBox 
    @bind-Value="_searchText" 
    Placeholder="Filter by keywords" 
    Style="width:100%"
    @oninput="@HandleInputChange" 
    @onkeypress="@HandleKeyPress"
    />

    <RadzenDataGrid @ref="grid" Data="@data" Count="@count" LoadData="@LoadData" TItem="AutoCAC.Models.OrderDialog" ExpandMode="DataGridExpandMode.Single"
    AllowPaging="true" ShowPagingSummary="true" PageSizeOptions=@(new int[]{5, 10, 20, 30, 50}) ColumnWidth="150px" IsLoading="@isLoading"
    AllowSorting="true" LoadColumnFilterData="@LoadColumnFilterData">
        <Columns>
            <RadzenDataGridColumn TItem="AutoCAC.Models.OrderDialog" Property="DisplayText" Title="Display Name" 
            WhiteSpace="WhiteSpace.Wrap" />
            <RadzenDataGridColumn TItem="AutoCAC.Models.OrderDialog" Property="Name" Title="Name" WhiteSpace="WhiteSpace.Wrap" />
            <RadzenDataGridColumn TItem="OrderDialog" Filterable="false" Sortable="false" Width="75px">
                <Template Context="dialog">
                    <RadzenButton Icon="check" Text="Select" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Primary"
                    Click="@(() => SelectDialog(dialog))" />
                </Template>
            </RadzenDataGridColumn>

        </Columns>
    </RadzenDataGrid>
    <RadzenRow>
        <RadzenButton Icon="cancel" Text="Cancel" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Secondary"
        Click="CloseDialog" />
    </RadzenRow>
</RadzenStack>

@code {
    private RadzenDataGrid<AutoCAC.Models.OrderDialog> grid;
    protected IEnumerable<AutoCAC.Models.OrderDialog> data;
    [Parameter] public string SearchText { get; set; }
    private string _searchText;
    protected int count;
    private bool? shouldCount = true;
    private string placeholderMsg;
    private bool isLoading = false;
    private ColumnFilterChoices<AutoCAC.Models.OrderDialog> _filterChoices;
    protected override async Task OnInitializedAsync()
    {
        _searchText = SearchText;
        using var context = DbFactory.CreateDbContext();
    }

    private async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;
        var query = BuildQuery();
        placeholderMsg = string.IsNullOrWhiteSpace(_searchText) ? "" : $"Keywords: {_searchText}; ";
        var result = await LoadDataGridService.ApplyLoadData(query, args, shouldCount);
        data = result.Data;
        count = result.Count;
        shouldCount = null;
        isLoading = false;
    }

    private async Task LoadColumnFilterData(DataGridLoadColumnFilterDataEventArgs<OrderDialog> args)
    {
        args.Top = null;
        args.Skip = null;
        if (_filterChoices == null)
        {
            _filterChoices = new ColumnFilterChoices<AutoCAC.Models.OrderDialog>(
                BuildQuery
            );
        }
        await _filterChoices.GetColumnFilterDataAsync(args);
    }

    private IQueryable<AutoCAC.Models.OrderDialog> BuildQuery()
    {
        var query = DbFactory.QueryFromSql<OrderDialog>($"Select * From OrderDialog Where [Type]='menu'");
        if (!string.IsNullOrWhiteSpace(_searchText))
        {
            var keywords = _searchText.Split(' ', StringSplitOptions.RemoveEmptyEntries);
            foreach (var keyword in keywords)
            {
                var temp = keyword; 
                query = query.Where(q => q.DisplayText.Contains(temp) || q.Name.Contains(temp));
            }
        }
        return query.AsNoTracking();
    }

    
    private System.Timers.Timer searchDebounceTimer;

    private void HandleInputChange(ChangeEventArgs e)
    {
        var input = e.Value?.ToString() ?? string.Empty;
        _searchText = input;

        searchDebounceTimer?.Stop();
        searchDebounceTimer?.Dispose();

        searchDebounceTimer = new System.Timers.Timer(300);
        searchDebounceTimer.Elapsed += async (_, _) =>
        {
            searchDebounceTimer.Dispose();
            await InvokeAsync(async () =>
            {
                shouldCount = true;
                await grid.FirstPage(true);
            });
        };
        searchDebounceTimer.AutoReset = false;
        searchDebounceTimer.Start();
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            searchDebounceTimer?.Stop();
            shouldCount = true;
            await grid.FirstPage(true);
        }
    }

    private void SelectDialog(OrderDialog selected)
    {
        DialogService.Close(selected);
    }

    private void CloseDialog()
    {
        DialogService.Close(null);
    }

}