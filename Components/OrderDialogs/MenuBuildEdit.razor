@page "/menubuild/{Id:int}"
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService
@inject LoadDataGridService LoadDataGridService
@using AutoCAC.Models
@using Microsoft.EntityFrameworkCore
@using AutoCAC.Extensions
@using AutoCAC.Utilities
@using AutoCAC.Components.OrderDialogs
@using Microsoft.AspNetCore.Components.Web
@inject IDbContextFactory<AutoCAC.Models.mainContext> DbFactory
@inject AutoCAC.Services.UserContextService UserContext

@if (RPMSRef?.PctComplete is not null && RPMSRef.PctComplete!=-1)
{
    <RadzenProgressBar @bind-Value="@RPMSRef.PctComplete" />
}
@if (currentMenu != null)
{
    @* Menu metadata display/edit *@
    @if (!editMode)
    {
        <RadzenButton Text="Edit Menu Attributes" Click="ToggleEditAsync" ButtonStyle="ButtonStyle.Light" Icon="edit" />
        <div class="rz-my-3">
            <p><strong>Display Name:</strong> @currentMenu.DisplayText</p>
            <p><strong>Columns:</strong> @currentMenu.Columns</p>
        </div>
    }
    else
    {
        <RadzenTemplateForm Data="@currentMenu" TItem="MenuBuildMetum" Submit="@SaveMenuMeta">
            <RadzenRow style="margin-bottom: 1rem">
                <RadzenColumn Size="2">
                    <RadzenLabel Text="Display Name:" />
                </RadzenColumn>
                <RadzenColumn Size="10">
                    <RadzenTextBox @bind-Value="currentMenu.DisplayText" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow style="margin-bottom: 1rem">
                <RadzenColumn Size="2">
                    <RadzenLabel Text="Name:" />
                </RadzenColumn>
                <RadzenColumn Size="10">
                    <RadzenTextBox @bind-Value="currentMenu.Name" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow style="margin-bottom: 1rem">
                <RadzenColumn Size="2">
                    <RadzenLabel Text="Columns:" />
                </RadzenColumn>
                <RadzenColumn Size="10">
                    <RadzenNumeric @bind-Value="currentMenu.Columns" Min="1" Max="4" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow style="margin-bottom: 1rem">
                <RadzenColumn Size="2">
                    <RadzenLabel Text="IEN of Menu To Replace:" />
                </RadzenColumn>
                <RadzenColumn Size="10">
                    <RadzenNumeric @bind-Value="currentMenu.ExistingMenu" Min="0" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenButton Text="Save" ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Primary" Icon="save" class="rz-mr-2" />
            <RadzenButton Text="Cancel" Click="ToggleEditAsync" ButtonStyle="ButtonStyle.Light" Icon="cancel" />
        </RadzenTemplateForm>
    }

    <h3>Menu Builder: @currentMenu?.DisplayText</h3>
    <RadzenRow>
        <RadzenButton Text="Copy Existing Menu" Click="@CopyExistingMenu" Icon="copy_all" />
        @if (UserContext.IsInGroupOrSuperuser())
        {
            <RadzenButton Text="Review Changes" Style="text-transform: none;" Icon="grading"
                          ButtonStyle="ButtonStyle.Primary"
                          Click="@(() => NavigationManager.NavigateTo($"/menubuild/{Id}/commit"))" />
            <RPMSOutput @ref="RPMSRef" ButtonLabel="Replace Placeholders">
                @if (newItems.Any(i => i.DisplayOnly == "PLACEHOLDER"))
                {
                    <RadzenRow Style="width: 100%;">
                        <RadzenCarousel ButtonShade="Radzen.Shade.Darker" AllowPaging="false" 
                        Auto="false" Style="width: 100%;">
                            <Items>
                                @foreach (var item in newItems.Where(i => i.DisplayOnly == "PLACEHOLDER"))
                                {
                                    <RadzenCarouselItem>
                                        <RadzenColumn Style="width: 80%;">
                                            <RadzenRow>
                                                <span>@item.DisplayText</span>  
                                            </RadzenRow>
                                            <RadzenRow>
                                                <RadzenTextBox @bind-Value="item.AdditionalDetails"
                                                    Style="width: 100%;"
                                                    Change="@(() => UpdateItem(item))" />
                                            </RadzenRow>
                                        </RadzenColumn>
                                    </RadzenCarouselItem>
                                }   
                            </Items>
                        </RadzenCarousel>
                    </RadzenRow>
                    <RadzenRow>
                        <RadzenButton Text="Transfer from RPMS to DB" Click="@OrderDialogsRpmsToDb" />
                    </RadzenRow>
                }
            </RPMSOutput>
        }
    </RadzenRow>

    @* Grid with drag-and-drop *@
    <div class="grid" style="display: grid; grid-template-columns: 30px repeat(@currentMenu.Columns, 1fr); gap: 20px;">
        @for (int row = 1; row <= MaxRow; row++)
        {
            var currentRow = row;
            <div class="grid-cell"><span>@currentRow</span></div>
            for (int col = 1; col <= currentMenu.Columns; col++)
            {
                var currentCol = col;
                var newCell = newItems.FirstOrDefault(m => m.RowNum == currentRow && m.ColNum == currentCol);
                <div class="grid-cell"
                        @ondragover:preventDefault
                        @ondragover="OnDragOver"
                        @ondrop="e => OnDrop(e, currentRow, currentCol)"
                        style="border:1px dashed #ccc; padding:5px;">
                    @if (newCell is not null)
                    {
                        <div draggable="true"
                                @ondragstart="e => OnDragStart(e, newCell)"
                                class="draggable-card">
                            <RadzenCard>
                                <RadzenSplitButton AlwaysOpenPopup="true" Size="ButtonSize.Small"
                                                   Variant="Variant.Text"
                                                   Click="@(btn => OnExistingSplitBtnClick(newCell, btn))">
                                    <ButtonContent>
                                        @if(newCell.Item?.Id is not null)
                                        {
                                            <i style="width: 100%; text-transform: none; text-align: left;">@($"{newCell.Mnemonic} {(string.IsNullOrWhiteSpace(newCell.DisplayText) ? newCell.Item?.DisplayText : newCell.DisplayText)}")</i>
                                        }
                                        else
                                        {
                                            switch (newCell.DisplayOnly)
                                            {
                                                case "PLACEHOLDER":
                                                    <span class="rz-color-danger" style="width: 100%; text-transform: none; text-align: left;">@($"***{newCell.DisplayText}")</span>
                                                    break;
                                                case "YES-HEADER":
                                                    <strong style="width: 100%; text-transform: none; text-align: left;">@newCell.DisplayText</strong>
                                                    break;
                                                default:
                                                    <span style="width: 100%; text-transform: none; text-align: left;">@newCell.DisplayText</span>
                                                    break;
                                            }
                                        }
                                    </ButtonContent>
                                    <ChildContent>
                                        <RadzenSplitButtonItem Text="Delete Contents" Value="Delete" Icon="delete" IconColor="@Colors.Danger" />
                                        <RadzenSplitButtonItem Text="Delete Contents AND Cell" Value="DeleteCell" Icon="delete" IconColor="@Colors.Danger" />
                                        <RadzenSplitButtonItem Text="Replace With Header" Value="Header" Icon="text_fields" IconColor="@Colors.Info" />
                                        <RadzenSplitButtonItem Text="Replace With Text" Value="Text" Icon="text_fields" IconColor="@Colors.Info" />
                                        <RadzenSplitButtonItem Text="Replace With Order Dialog" Value="Order Dialog" Icon="prescriptions" IconColor="@Colors.Info" />
                                        <RadzenSplitButtonItem Text="Insert Cell Above" Value="Insert" Icon="add_row_above" IconColor="@Colors.Success" />
                                        <RadzenSplitButtonItem Text="Edit Mnemonic" Value="Mnemonic" Icon="edit_attributes" IconColor="@Colors.Warning" />
                                    </ChildContent>
                                </RadzenSplitButton>
                            </RadzenCard>
                        </div>
                    }
                    else
                    {
                        @* Empty cell – show ADD split button *@
                        <RadzenSplitButton AlwaysOpenPopup="true" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Primary"
                                            Click="@(btn => OnEmptyBtnClick(currentRow, currentCol, btn))"
                                            Style="width: 100%;" Icon="menu">
                            <RadzenSplitButtonItem Text="Add Header" Value="Header" Icon="text_fields" IconColor="@Colors.Success" />
                            <RadzenSplitButtonItem Text="Add Text" Value="Text" Icon="text_fields" IconColor="@Colors.Success" />
                            <RadzenSplitButtonItem Text="Add Order Dialog" Value="Order Dialog" Icon="prescriptions" IconColor="@Colors.Success" />
                            <RadzenSplitButtonItem Text="Delete Cell" Value="MoveUp" Icon="delete" IconColor="@Colors.Danger" />
                            <RadzenSplitButtonItem Text="Insert Cell Above" Value="Insert" Icon="add_row_above" IconColor="@Colors.Success" />
                        </RadzenSplitButton>
                    }
                </div>
            }
        }
    </div>
}

@code {
    [Parameter] public int Id { get; set; }
    private RPMSOutput RPMSRef;
    private List<MenuBuild> newItems;
    private MenuBuildMetum currentMenu;
    private int additionalRows = 1;
    private bool editMode;
    private MenuBuild dragSourceItem;

    private int MaxRow => (newItems.Any() ? newItems.Max(mb => mb.RowNum) : 1) + additionalRows;

    private int MaxTxtLength => currentMenu?.Columns switch
    {
        4 => 26,
        3 => 39,
        2 => 79,
        _ => 240
    };

    protected override async Task OnInitializedAsync()
    {
        await GetCurrentMenu();
        await GetNewItems(null);
        editMode = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task GetCurrentMenu()
    {
        await using var db = await DbFactory.CreateDbContextAsync();
        currentMenu = await db.MenuBuildMeta
                //.Include(m => m.ExistingMenuNavigation)
                .FirstOrDefaultAsync(o => o.Id == Id);
    }

    private async Task ToggleEditAsync()
    {
        await GetCurrentMenu();
        await GetNewItems(null);
        await InvokeAsync(StateHasChanged);
        editMode = !editMode;
    }

    private async Task SaveMenuMeta()
    {
        await using var db = await DbFactory.CreateDbContextAsync();

        // Attach the instance you're editing in the UI
        db.Attach(currentMenu);
        db.Entry(currentMenu).State = currentMenu.Id == 0
            ? EntityState.Added
            : EntityState.Modified;

        try
        {
            await db.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException ex)
        {
            // Resolve and retry (client-wins overwrite)
            var entry = ex.Entries.Single(e => e.Entity is MenuBuildMetum);

            var databaseValues = await entry.GetDatabaseValuesAsync();
            if (databaseValues == null)
            {
                // It was deleted by someone else -> re-insert
                entry.State = EntityState.Added;
            }
            else
            {
                // Align original to DB so our current values (from currentMenu) can be saved on retry
                entry.OriginalValues.SetValues(databaseValues);
                // (entry.CurrentValues already contains currentMenu's values)
            }

            await db.SaveChangesAsync(); // retry once
            // EF updates the RowVersion on currentMenu automatically on success
        }

        editMode = false;
        await GetNewItems();
        await InvokeAsync(StateHasChanged);
    }

    private void AddRow()
    {
        additionalRows++;
        StateHasChanged();
    }

    private async Task MoveItemsAsync(int startRow, int col, int moveRows = -1)
    {
        var affectedItems = await DbFactory.ExecuteSqlAsync($"Update MenuBuild Set RowNum=RowNum+{moveRows} Where RowNum>={startRow} and ColNum={col} and Menu_id={Id}");
        if (affectedItems == 0)
        {
            additionalRows+=moveRows;
        }
        await GetNewItems();
        await InvokeAsync(StateHasChanged);
    }

    private async Task GetNewItems(string updateStatus = "CHANGES REQUESTED")
    {
        await using var db = await DbFactory.CreateDbContextAsync();
        newItems = await db.MenuBuilds
            .Include(mb => mb.Item)
            .Where(mb => mb.MenuId == Id)
            .ToListAsync();
        if (!string.IsNullOrWhiteSpace(updateStatus))
        {
            await db.SetMenuBuildMetaStatusAsync(Id, updateStatus);
        }
    }

    private async Task<string> OpenTextDialog(string dispOnly = "YES-HEADER", string initial = null)
    {
        string txtType = dispOnly == "YES-HEADER" ? "Header" : "Text";
        return await DialogService.TextPromptAsync(txtType, $"Enter {txtType} to Display", initial: initial,
            maxLength: MaxTxtLength, disallowedChars: "-;,=^");
    }

    private async Task OnEmptyBtnClick(int row, int col, RadzenSplitButtonItem btn)
    {
        switch (btn.Value)
        {
            case "Header":
                await TxtItemAdd(row, col);
                break;
            case "Text":
                await TxtItemAdd(row, col, "YES");
                break;
            case "Order Dialog":
                await OrderDialogAdd(row, col);
                break;
            case "MoveUp":
                await MoveItemsAsync(row+1, col);
                break;
            case "Insert":
                await MoveItemsAsync(row, col, 1);
                break;
        }
    }

    private async Task OnExistingSplitBtnClick(MenuBuild item, RadzenSplitButtonItem btn)
    {
        switch (btn.Value)
        {
            case "Header":
                await TxtItemEdit(item);
                break;
            case "Text":
                await TxtItemEdit(item, "YES");
                break;
            case "Order Dialog":
                await OrderDialogEdit(item);
                break;
            case "Delete":
                await DeleteItem(item);
                break;
            case "DeleteCell":
                await DeleteItem(item);
                await MoveItemsAsync(item.RowNum + 1, item.ColNum);
                break;
            case "Insert":
                await MoveItemsAsync(item.RowNum, item.ColNum, 1);
                break;
            case "Mnemonic":
                await EditMnemonic(item);
                break;
        }
    }

    private async Task TxtItemAdd(int row, int col, string dispOnly = "YES-HEADER")
    {
        string dispTxt = await OpenTextDialog(dispOnly);
        if (string.IsNullOrWhiteSpace(dispTxt)) return;
        await AddItem(new MenuBuild
        {
            MenuId = Id,
            DisplayText = dispTxt,
            DisplayOnly = dispOnly,
            RowNum = row,
            ColNum = col
        });
    }

    private async Task OrderDialogAdd(int row, int col)
    {
        var placeholderField = new PlaceholderField
        {
            MaxLength = MaxTxtLength - 3
        };
        var qo = await DialogService.OpenAsync<OrderDialogSelect>(
            "Order Dialog",
            parameters: new Dictionary<string, object> { { "placeholderField", placeholderField } },
            options: new DialogOptions { Width = "75%", Resizable = true });
        if (qo != null)
        {
            if (qo is PlaceholderField ph)
            {
                await AddItem(new MenuBuild
                {
                    MenuId = Id,
                    DisplayText = ph.MenuTxt,
                    DisplayOnly = "PLACEHOLDER",
                    RowNum = row,
                    ColNum = col,
                    AdditionalDetails = ph.ExtendedTxt
                });
            }
            else if (qo is OrderDialog qoDialog)
            {
                await AddItem(new MenuBuild
                {
                    MenuId = Id,
                    ItemId = qoDialog.Id,
                    RowNum = row,
                    ColNum = col
                });
            }
        }
    }

    public async Task AddItem(MenuBuild item)
    {
        await using var db = await DbFactory.CreateDbContextAsync();
        db.MenuBuilds.Add(item);
        await SaveItemChanges(db);
    }

    private async Task TxtItemEdit(MenuBuild item, string dispOnly = "YES-HEADER")
    {
        var curDisp = "";
        if (!string.IsNullOrWhiteSpace(item.DisplayText))
        {
            curDisp = item.DisplayText;
        }
        else if (!string.IsNullOrWhiteSpace(item.Item?.DisplayText))
        {
            curDisp = item.Item?.DisplayText;
        }
        string dispTxt = await OpenTextDialog(dispOnly, curDisp);
        if (string.IsNullOrWhiteSpace(dispTxt)) return;
        item.DisplayText = dispTxt;
        item.DisplayOnly = dispOnly;
        item.AdditionalDetails = null;
        item.ItemId = null;
        item.Item = null;
        await UpdateItem(item);
    }

    private async Task OrderDialogEdit(MenuBuild item)
    {
        PlaceholderField placeholderField = new PlaceholderField
        {
            MaxLength = MaxTxtLength - 3
        };
        if (item.Item != null && item.Item.Id != 0)
        {
            var itmDisp = string.IsNullOrWhiteSpace(item.DisplayText) ? item.Item.DisplayText : item.DisplayText;
            placeholderField.MenuTxt = itmDisp;
            placeholderField.ExtendedTxt = $"{itmDisp} {item.Item.Name}";
        }
        else if (!string.IsNullOrWhiteSpace(item.DisplayOnly))
        {
            placeholderField.MenuTxt = item.DisplayText;
            placeholderField.ExtendedTxt = string.IsNullOrWhiteSpace(item.AdditionalDetails) ? item.DisplayText : item.AdditionalDetails;
        }
        var result = await DialogService.OpenAsync<OrderDialogSelect>(
            item.DisplayText,
            new Dictionary<string, object> { { "SearchText", placeholderField.ExtendedTxt }, { "placeholderField", placeholderField } },
            new DialogOptions { Width = "75%", Resizable = true }
        );
        if (result == null) return;

        if (result is PlaceholderField newText)
        {
            item.DisplayText = newText.MenuTxt;
            item.AdditionalDetails = newText.ExtendedTxt;
            item.ItemId = null;
            item.Item = null;
            item.DisplayOnly = "PLACEHOLDER";
        }
        else if (result is OrderDialog selectedDialog)
        {
            item.DisplayText = null;
            item.ItemId = selectedDialog.Id;
            item.DisplayOnly = null;
        }
        await UpdateItem(item);
    }

    private async Task SaveItemChanges(mainContext db)
    {
        bool success = await db.SaveChangesHandleConcurrencyAsync(NotificationService);
        if (!success)
        {
            await GetNewItems(null);
        }
        else
        {
            await GetNewItems();
            await db.SetMenuBuildMetaStatusAsync(Id);
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task UpdateItem(MenuBuild item)
    {
        await using var db = await DbFactory.CreateDbContextAsync();
        db.MenuBuilds.Update(item);
        await SaveItemChanges(db);
    }

    public async Task DeleteItem(MenuBuild item)
    {
        await using var db = await DbFactory.CreateDbContextAsync();
        db.MenuBuilds.Remove(item);
        await SaveItemChanges(db);
    }

    private async Task EditMnemonic(MenuBuild item)
    {
        var result = await DialogService.TextPromptAsync("Edit Mnemonic", "Mnemonic", initial: item.Mnemonic, maxLength: 4);
        if (result == null) return;
        item.Mnemonic = result;
        await UpdateItem(item);
    }

    private async Task OrderDialogsRpmsToDb()
    {
        await RPMSRef.RunUpdateFromRPMS("OrderDialog", async () =>
        {
            foreach (var item in newItems.Where(i => i.DisplayOnly == "PLACEHOLDER").ToList())
            {
                await OrderDialogEdit(item);
            }
        });
    }

    void OnDragStart(DragEventArgs e, MenuBuild cell)
    {
        dragSourceItem = cell;
        e.DataTransfer.EffectAllowed = "move";
    }

    void OnDragOver(DragEventArgs e)
    {
        e.DataTransfer.DropEffect = "move";
    }

    private async Task OnDrop(DragEventArgs e, int targetRow, int targetCol)
    {
        if (dragSourceItem == null) return;
        if (dragSourceItem.RowNum == targetRow && dragSourceItem.ColNum == targetCol) return;

        var commands = new List<FormattableString>();

        // Check if target cell is occupied
        var targetOccupied = newItems.Any(m =>
            m.RowNum == targetRow &&
            m.ColNum == targetCol &&
            m.MenuId == Id);

        if (targetOccupied)
        {
            commands.Add($@"
                UPDATE MenuBuild 
                SET RowNum = RowNum + 1 
                WHERE RowNum >= {targetRow} 
                  AND ColNum = {targetCol} 
                  AND Menu_id = {Id}");
        }

        commands.Add($@"
            UPDATE MenuBuild 
            SET RowNum = {targetRow}, ColNum = {targetCol} 
            WHERE Id = {dragSourceItem.Id}");

        bool isSameCol = targetCol == dragSourceItem.ColNum;
        bool isNextRow = targetRow == dragSourceItem.RowNum + 1;
        bool isBecomingLast = !newItems.Any(m =>
            m.ColNum == dragSourceItem.ColNum &&
            m.RowNum > dragSourceItem.RowNum &&
            m.Id != dragSourceItem.Id);

        if (!(isSameCol && (isNextRow || isBecomingLast)))
        {
            commands.Add($@"
                UPDATE MenuBuild 
                SET RowNum = RowNum - 1 
                WHERE RowNum > {dragSourceItem.RowNum} 
                  AND ColNum = {dragSourceItem.ColNum} 
                  AND Menu_id = {Id}");
        }

        await DbFactory.ExecuteSqlTransactionsAsync(commands);
        await GetNewItems();

        dragSourceItem = null;
        await InvokeAsync(StateHasChanged);
    }

    public class PlaceholderField
    {
        public string MenuTxt { get; set; }
        public string ExtendedTxt { get; set; }
        public int MaxLength { get; set; }
    }

    private async Task CopyExistingMenu()
    {
        AutoCAC.Models.OrderDialog selectedMenu = await DialogService.OpenAsync<MenuSelectExisting>(
            "Order Dialog",
            options: new DialogOptions { Width = "75%", Resizable = true });
        if (selectedMenu != null)
        {
            var commands = new List<FormattableString>
            {
                $"DELETE FROM MenuBuild Where Menu_id={Id}",
                $@"Insert Into MenuBuild ([Menu_id], [Item_id], [Mnemonic], [DisplayText], [DisplayOnly], [RowNum], [ColNum])
                                          SELECT {Id} Menu_id ,[OrderDialogID] Item_id, [Mnemonic], [DisplayText], [DisplayOnly], [RowNum], [ColNum]
                                          FROM [main].[dbo].[OrderMenu]
                                          Where id={selectedMenu.Id}"
            };
            await DbFactory.ExecuteSqlTransactionsAsync(commands);
            await GetNewItems();
            currentMenu.Columns = ((byte)newItems.Max(x => x.ColNum));
            await SaveMenuMeta();
            additionalRows = 1;
            await InvokeAsync(StateHasChanged);
        }
    }
}
