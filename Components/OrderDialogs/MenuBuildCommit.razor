@page "/menubuild/{Id:int}/commit"
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject NotificationService NotificationService
@inject LoadDataGridService LoadDataGridService
@using AutoCAC.Models
@using Microsoft.EntityFrameworkCore
@using AutoCAC.Extensions
@using AutoCAC.Components.OrderDialogs
@inject IDbContextFactory<AutoCAC.Models.mainContext> DbFactory
@inject IJSRuntime JS
@using System.Text
@using System.Text.RegularExpressions;

<h3>Review and Commit changes to RPMS for @currentMenu?.DisplayText (@Id)</h3>
<RadzenRow>
    <RadzenColumn>
        <RadzenButton 
            Text="Back to Menu Edit"
            ButtonStyle="ButtonStyle.Base"
            Click="@(() => NavigationManager.NavigateTo($"/menubuild/{Id}"))" />
    </RadzenColumn>
    <RadzenColumn>
        <RadzenButton 
            Text="Commit Changes"
            Icon="check"
            ButtonStyle="ButtonStyle.Success"
            Click="@ShowDialogAndRun" />
    </RadzenColumn>
</RadzenRow>
<RPMSOutput @ref="RPMSRef"/>
<RadzenRow>
    <pre>You can either use the "Commit Changes" button above (if you've already linked to an existing menu IEN) OR the following</pre>
    <pre>Go to ^MN (enter/edit menu) go to the menu you want to replace. 
        Then Click the button below to copy the following and paste as many times as needed to delete all rows in the menu</pre>
</RadzenRow>
<RadzenRow>
    <RadzenButton 
        Text="Copy Delete script to clipboard"
        Icon="content_copy"
        ButtonStyle="ButtonStyle.Info"
        Click="@CopyDeleteScript" />
</RadzenRow>
<RadzenRow>
    <pre>
        Then click the button below to copy the menu content script to your clipboard.
        A dialog will pop up asking if you want to mark the request as complete, you can wait until you're done to hit yes.
    </pre>
</RadzenRow>
<RadzenRow>
    <RadzenButton 
        Text="Copy Menu Content script to clipboard"
        Icon="content_copy"
        ButtonStyle="ButtonStyle.Info"
        Click="@CopyRPMSScript" />
</RadzenRow>
<RadzenRow>
    <pre>
        Paste the contents of your clipboard to RPMS.
        *DO NOT LEAVE THE RPMS SCREEN WHILE THE CONTENT IS PASTING*
    </pre>
</RadzenRow>
<div class="grid" style="display: grid; grid-template-columns: repeat(@maxCol, 1fr); gap: 20px;">
    @for (int row = 1; row <= maxRow; row++)
    {
        var currentRow = row;
        for (int col = 1; col <= maxCol; col++)
        {
            var currentCol = col;
            var cell = addLst?.FirstOrDefault(m => m.RowNum == row && m.ColNum == col);
            <RadzenCard>
                @switch (cell?.DisplayOnly)
                {
                    case "PLACEHOLDER":
                        <h3 class="rz-color-danger">
                            @cell.DisplayText
                        </h3>
                        break;
                    case "YES-HEADER":
                        <strong>@cell.DisplayText</strong>
                        break;
                    case "YES":
                        <span>@cell.DisplayText</span>
                        break;
                    default:
                        if(cell != null)
                        {
                            var _newcelldisp = string.IsNullOrWhiteSpace(cell.DisplayText) ? $"{cell.Mnemonic} {cell.Item.DisplayText}" : $"{cell.Mnemonic} {cell.DisplayText}";
                            <i>@_newcelldisp</i>
                        }
                        break;
                }
            </RadzenCard>
        }
    }
</div>

@* <pre>@RPMSScript</pre> *@
@code {
    [Parameter] public int Id { get; set; }
    [CascadingParameter(Name = "MainLayout")] public MainLayout Layout { get; set; }
    private RPMSOutput RPMSRef;
    private MenuBuildMetum currentMenu;
    private mainContext db;
    private List<AutoCAC.Models.MenuBuild> addLst;
    private int maxRow = 1;
    private int maxCol = 1;
    private string RPMSScript = "";
    protected override async Task OnInitializedAsync()
    {
        db = await DbFactory.CreateDbContextAsync();
        currentMenu = await db.MenuBuildMeta
                .Include(m => m.ExistingMenuNavigation)
                .FirstOrDefaultAsync(o => o.Id == Id);
        await GetAddTbl();
        GetRPMSScript();
        await InvokeAsync(StateHasChanged);
        //await RPMSRef.RunUpdateFromRPMS("OrderDialog", GetChangesTbl);
    }

    private async Task GetAddTbl()
    {
        addLst = await (
            from c in db.MenuBuilds
            where c.MenuId == Id
            orderby c.ColNum, c.RowNum
            select c
        )
        .Include(x => x.Item)
        .ToListAsync();

        maxRow = addLst.Max(mb => mb.RowNum);
        maxCol = addLst.Max(mb => mb.ColNum);
        await InvokeAsync(StateHasChanged);
    }

    private async Task RunMenuUpdate()
    {
        await Layout.GoToMenu("Menu Items Edit");

        var menuId = currentMenu?.ExistingMenuNavigation.Id;
        if (menuId==null)
        {
            throw new Exception("Must be linked to existing RPMS menu");
        }
        await Layout.RPMS.SendAsync($"`{menuId}");
        Layout.RPMS.CheckPromptAndThrow("Select SEQUENCE:");
        List<string> optionlst = await Layout.RPMS.GetOptions();
        optionlst.TrimBetween("Choose from:", "You may enter a new ITEMS", StringComparison.Ordinal, StringComparison.Ordinal);
        optionlst = optionlst
            .Where(s => !string.IsNullOrWhiteSpace(s))
            .Select(s =>
            {
                var normalized = Regex.Replace(s, @"\s+", " ").Trim();
                var match = Regex.Match(normalized, @"\b\d+\.\d+\b");
                var token = match.Success ? match.Value : null;
                return token;
            })
            .Where(s => !string.IsNullOrEmpty(s))
            .ToList();
        foreach(var opt in optionlst)
        {
            Layout.RPMS.CheckPromptAndThrow("Select SEQUENCE:");
            await Layout.RPMS.SendAsync(opt);
            Layout.RPMS.CheckPromptAndThrow("SEQUENCE:");
            await Layout.RPMS.SendAsync("@");
            Layout.RPMS.CheckPromptAndThrow("SEQUENCE?");
            await Layout.RPMS.SendAsync("YES");
        }
        string seq = "";
        string itemid = "";
        string dispTxt = "";
        string dispOnly = "";
        string mnem = "";
        //add each item
        foreach (var a in addLst)
        {
            seq = $"{a.RowNum}.{a.ColNum}";
            itemid = a.ItemId.HasValue && a.ItemId != 0 ? $"`{a.ItemId}" : "";
            dispTxt = !string.IsNullOrWhiteSpace(a.DisplayText) ? a.DisplayText : "";

            if (string.IsNullOrWhiteSpace(a.DisplayOnly))
            {
                dispOnly = "0";
                mnem = !string.IsNullOrWhiteSpace(a.Mnemonic) ? a.Mnemonic : "";
            }
            else
            {
                switch (a.DisplayOnly)
                {
                    case "YES-HEADER":
                        dispOnly = "2";
                        break;
                    case "YES":
                        dispOnly = "1";
                        break;
                    case "PLACEHOLDER":
                        dispOnly = "1";
                        dispTxt = $"***{dispTxt}";
                        break;
                }
                mnem = "";
            }
            Layout.RPMS.CheckPromptAndThrow("Select SEQUENCE:");
            await Layout.RPMS.SendAsync(seq);
            Layout.RPMS.CheckPromptAndThrow("ITEM:");
            await Layout.RPMS.SendAsync(itemid);
            Layout.RPMS.CheckPromptAndThrow("DISPLAY TEXT:");
            await Layout.RPMS.SendAsync(dispTxt);
            Layout.RPMS.CheckPromptAndThrow("DISPLAY ONLY");
            await Layout.RPMS.SendAsync(dispOnly);
            Layout.RPMS.CheckPromptAndThrow("MNEMONIC:");
            await Layout.RPMS.SendAsync(mnem);
        }
    }

    private void GetRPMSScript()
    {
        List<string> lst = new List<string>();
        string rowNum = "";
        string colNum = "";
        string itemid = "";
        string dispTxt = "";
        string dispOnly = "";
        string headerTxt = "";
        string mnem = "";
        foreach (var a in addLst)
        {
            lst.Add("ADD");
            rowNum = a.RowNum.ToString();
            colNum = a.ColNum.ToString();
            itemid = a.ItemId.HasValue ? $"`{a.ItemId}" : "";
            dispTxt = !string.IsNullOrWhiteSpace(a.DisplayText) ? a.DisplayText : "";
            dispOnly = !string.IsNullOrWhiteSpace(a.DisplayOnly) ? a.DisplayOnly : "";
            if (dispOnly=="PLACEHOLDER")
            {
                dispTxt = $"***{dispTxt}";
            }
            headerTxt = dispOnly switch
            {
                "YES" => "NO",
                "YES-HEADER" => "YES",
                "PLACEHOLDER" => "NO",
                _ => ""
            };
            mnem = !string.IsNullOrWhiteSpace(a.Mnemonic) ? a.Mnemonic : "";
            if (dispOnly != "")
            {
                lst.Add("Text or Header");
                lst.Add(dispTxt);
                lst.Add(rowNum);
                lst.Add(colNum);
                lst.Add(headerTxt);
            }
            else
            {
                lst.Add("Menu Items");
                lst.Add(itemid);
                lst.Add(rowNum);
                lst.Add(colNum);
                lst.Add(dispTxt);
                lst.Add(mnem);
            }
            lst.Add("^");
        }
        RPMSScript = string.Join("\r\n", lst)+"\r\n";
    }

    private async Task CopyRPMSScript()
    {
        await JS.CopyText(RPMSScript);
        bool? markComplete = await DialogService.Confirm("Successfully copied contents to clipboard. Mark as completed?", "Changes Made");
        if (markComplete==true)
        {
            await using var db = await DbFactory.CreateDbContextAsync();
            await db.SetMenuBuildMetaStatusAsync(Id, "DONE");
        }
    }

    private async Task CopyDeleteScript()
    {
        var deleteTxt = "REMOVE\nROW\n1\nYES\nYES\n";
        await JS.CopyText(deleteTxt);
        NotificationService.Notify(detail: "Copied delete script to clipboard");
    }

    private async Task ShowDialogAndRun()
    {
        await JS.DialogShow();
        await RPMSRef.RunWhenSignedIn(RunMenuUpdate);
    }

}
