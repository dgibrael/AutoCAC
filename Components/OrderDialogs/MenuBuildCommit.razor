@page "/menubuild/{Id:int}/commit"
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject NotificationService NotificationService
@inject LoadDataGridService LoadDataGridService
@using AutoCAC.Models
@using Microsoft.EntityFrameworkCore
@using AutoCAC.Extensions
@using AutoCAC.Components.OrderDialogs
@inject IDbContextFactory<AutoCAC.Models.mainContext> DbFactory
@inject IJSRuntime JS
@using System.Text

<h3>Review and Commit changes to RPMS for @currentMenu?.DisplayText (@Id)</h3>
<RadzenRow>
    <RadzenColumn>
        <RadzenButton 
            Text="Back to Menu Edit"
            ButtonStyle="ButtonStyle.Base"
            Click="@(() => NavigationManager.NavigateTo($"/menubuild/{Id}"))" />
    </RadzenColumn>
    <RadzenColumn>
        <RadzenButton 
            Text="Commit Changes"
            Icon="check"
            ButtonStyle="ButtonStyle.Success"
            Click="@ShowDialogAndRun" />
    </RadzenColumn>
    <RadzenColumn>
        <RadzenButton 
            Text="Download RPMS script"
            ButtonStyle="ButtonStyle.Info"
            Click="@DownloadRPMSScript" />
    </RadzenColumn>
</RadzenRow>
<RPMSOutput @ref="RPMSRef"/>
<div class="grid" style="display: grid; grid-template-columns: repeat(@maxCol, 1fr); gap: 20px;">
    @for (int row = 1; row <= maxRow; row++)
    {
        var currentRow = row;
        for (int col = 1; col <= maxCol; col++)
        {
            var currentCol = col;
            var cell = addLst?.FirstOrDefault(m => m.RowNum == row && m.ColNum == col);
            <RadzenCard>
                @switch (cell?.DisplayOnly)
                {
                    case "PLACEHOLDER":
                        <h3 class="rz-color-danger">
                            PLACEHOLDER!! REPLACE BEFORE COMMITTING @cell.DisplayText
                        </h3>
                        break;
                    case "YES-HEADER":
                        <strong class="rz-color-success">@cell.DisplayText</strong>
                        break;
                    case "YES":
                        <span class="rz-color-success">@cell.DisplayText</span>
                        break;
                    default:
                        if(cell != null)
                        {
                            <i class="rz-color-success">@cell?.Item.DisplayText</i>
                        }
                        break;
                }
            </RadzenCard>
        }
    }
</div>
<pre>@RPMSScript</pre>
@code {
    [Parameter] public int Id { get; set; }
    [CascadingParameter(Name = "MainLayout")] public MainLayout Layout { get; set; }
    private RPMSOutput RPMSRef;
    private MenuBuildMetum currentMenu;
    private mainContext db;
    private List<AutoCAC.Models.MenuBuild> addLst;
    private int maxRow = 1;
    private int maxCol = 1;
    private string RPMSScript = "";
    protected override async Task OnInitializedAsync()
    {
        db = await DbFactory.CreateDbContextAsync();
        currentMenu = await db.MenuBuildMeta.FirstOrDefaultAsync(o => o.Id == Id);
        await GetAddTbl();
        GetRPMSScript();
        await InvokeAsync(StateHasChanged);
        //await RPMSRef.RunUpdateFromRPMS("OrderDialog", GetChangesTbl);
    }

    private async Task GetAddTbl()
    {
        addLst = await (
            from c in db.MenuBuilds
            where c.MenuId == Id
            orderby c.ColNum, c.RowNum
            select c
        )
        .Include(x => x.Item)
        .ToListAsync();

        maxRow = addLst.Max(mb => mb.RowNum);
        maxCol = addLst.Max(mb => mb.ColNum);
        await InvokeAsync(StateHasChanged);
    }

    private async Task RunMenuUpdate()
    {
        await Layout.GoToMenu("Menu Items Edit");
        var menuId = $"`{currentMenu.Id}";
        await Layout.RPMS.SendAsync(menuId);
        //var deleteList = addLst.Where(c => c.ChangeType == "DELETE").ToList();
        //var updateList = addLst.Where(c => c.ChangeType == "CHANGE").ToList();
        string seq = "";
        string itemid = "";
        string dispTxt = "";
        string dispOnly = "";
        string mnem = "";
        foreach (var a in addLst)
        {
            seq = $"{a.RowNum}.{a.ColNum}";
            itemid = a.ItemId.HasValue ? $"`{a.ItemId}" : "";
            dispTxt = !string.IsNullOrWhiteSpace(a.DisplayText) ? a.DisplayText : "";
            dispOnly = !string.IsNullOrWhiteSpace(a.DisplayOnly) && a.DisplayOnly.StartsWith("YES") ? a.DisplayOnly : "";
            mnem = !string.IsNullOrWhiteSpace(a.Mnemonic) ? a.Mnemonic : "";

            Layout.RPMS.CheckPromptAndThrow("Select SEQUENCE:");
            await Layout.RPMS.SendAsync(seq);
            Layout.RPMS.CheckPromptAndThrow("ITEM:");
            await Layout.RPMS.SendAsync(itemid);
            Layout.RPMS.CheckPromptAndThrow("DISPLAY TEXT:");
            await Layout.RPMS.SendAsync(dispTxt);
            Layout.RPMS.CheckPromptAndThrow("DISPLAY ONLY");
            await Layout.RPMS.SendAsync(dispOnly);
            Layout.RPMS.CheckPromptAndThrow("MNEMONIC:");
            await Layout.RPMS.SendAsync(mnem);
        }
    }

    private void GetRPMSScript()
    {
        List<string> lst = new List<string>();
        string rowNum = "";
        string colNum = "";
        string itemid = "";
        string dispTxt = "";
        string dispOnly = "";
        string headerTxt = "";
        string mnem = "";
        foreach (var a in addLst)
        {
            lst.Add("ADD");
            rowNum = a.RowNum.ToString();
            colNum = a.ColNum.ToString();
            itemid = a.ItemId.HasValue ? $"`{a.ItemId}" : "";
            dispTxt = !string.IsNullOrWhiteSpace(a.DisplayText) ? a.DisplayText : "";
            dispOnly = !string.IsNullOrWhiteSpace(a.DisplayOnly) && a.DisplayOnly.StartsWith("YES") ? a.DisplayOnly : "";
            headerTxt = dispOnly switch
            {
                "YES" => "NO",
                "YES-HEADER" => "YES",
                _ => ""
            };
            mnem = !string.IsNullOrWhiteSpace(a.Mnemonic) ? a.Mnemonic : "";
            if (dispOnly != "")
            {
                lst.Add("Text or Header");
                lst.Add(dispTxt);
                lst.Add(rowNum);
                lst.Add(colNum);
                lst.Add(headerTxt);
            }
            else
            {
                lst.Add("Menu Items");
                lst.Add(itemid);
                lst.Add(rowNum);
                lst.Add(colNum);
                lst.Add(dispTxt);
                lst.Add(mnem);
            }
            lst.Add("^");
        }
        RPMSScript = string.Join("\r\n", lst)+"\r\n";
    }

    private async Task DownloadRPMSScript()
    {
        await JS.DownloadString(RPMSScript);
    }

    private async Task ShowDialogAndRun()
    {
        await JS.DialogShow();
        await RPMSRef.RunWhenSignedIn(RunMenuUpdate);
    }

}
