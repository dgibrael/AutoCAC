@page "/menubuild/{Id:int}"
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService
@inject LoadDataGridService LoadDataGridService
@using AutoCAC.Models
@using Microsoft.EntityFrameworkCore
@using AutoCAC.Extensions
@inject IDbContextFactory<AutoCAC.Models.mainContext> DbFactory

<h3>Menu Builder: @currentMenu?.DisplayText (@Id)</h3>

<div class="grid" style="display: grid; grid-template-columns: repeat(@maxCol, 1fr); gap: 10px;">
    @for (int row = 1; row <= maxRow; row++)
    {
        var currentRow = row;
        for (int col = 1; col <= maxCol; col++)
        {
            var currentCol = col;
            var cell = menuItems?.FirstOrDefault(m => m.RowNum == row && m.ColNum == col);
            <div class="border p-2 rounded shadow">
                @if (cell is not null)
                {
                    if (cell.DisplayOnly == "YES-HEADER")
                    {
                        <strong>@cell.DisplayText</strong>
                    }
                    else if (cell.DisplayOnly == "YES")
                    {
                        <span>@cell.DisplayText</span>
                    }
                    else
                    {
                        <span>@($"{cell.Mnemonic} {cell.Item.DisplayText}")</span>
                    }
                    <RadzenButton Text="Delete" ButtonStyle="ButtonStyle.Danger" Style="margin-top: 5px;" />
                }
                else
                {
                    <RadzenDropDown 
                        TValue="string"
                        Data="@itemTypes" 
                        Placeholder="Add..." 
                        Change="@(args => OnAddItemSelected(currentRow, currentCol, args))"
                        Style="width: 100%;" />

                }
            </div>
        }
    }
</div>
<RadzenButton Text="Add Row" ButtonStyle="ButtonStyle.Secondary" Click="@AddRow" Style="margin-top: 10px;" />

@code {
    [Parameter] public int Id { get; set; }

    private List<AutoCAC.Models.MenuBuild> menuItems;
    private OrderDialog currentMenu;
    private mainContext db;
    private int maxRow = 1;
    private int maxCol = 1;
    private List<string> itemTypes = new() { "Text", "Header", "Menu", "Order Set", "Quick Order" };

    protected override async Task OnInitializedAsync()
    {
        db = await DbFactory.CreateDbContextAsync();

        currentMenu = await db.OrderDialogs.FirstOrDefaultAsync(o => o.Id == Id);
        menuItems = await db.MenuBuilds
            .Where(mb => mb.MenuId == Id)
            .ToListAsync();

        // Column count based on OrderDialog.ColumnWidth
        if (currentMenu?.ColumnWidth is double width)
        {
            maxCol = width < 27.0 ? 4 :
                     width < 40.0 ? 3 :
                     width < 79.0 ? 2 : 1;
        }

        // Max row from items (default to 0)
        maxRow = menuItems.Any() 
        ? menuItems.Max(m => m.RowNum)
        : 1;
    }

    private void AddRow()
    {
        maxRow++;
        StateHasChanged();
    }

    private void OnAddItemSelected(int row, int col, object value)
    {
        var selected = value?.ToString();
        switch (selected)
        {
            case "Text":
                Console.WriteLine($"Add TEXT at [{row}, {col}]");
                break;
            case "Header":
                Console.WriteLine($"Add HEADER at [{row}, {col}]");
                break;
            case "Menu":
                Console.WriteLine($"Add MENU at [{row}, {col}]");
                break;
            case "Order Set":
                Console.WriteLine($"Add ORDER SET at [{row}, {col}]");
                break;
            case "Quick Order":
                Console.WriteLine($"Add QUICK ORDER at [{row}, {col}]");
                break;
        }
    }


}

