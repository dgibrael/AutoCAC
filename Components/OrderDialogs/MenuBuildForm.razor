@page "/menubuild/{Id:int}"
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService
@inject LoadDataGridService LoadDataGridService
@using AutoCAC.Models
@using Microsoft.EntityFrameworkCore
@using AutoCAC.Extensions
@using AutoCAC.Components.OrderDialogs
@inject IDbContextFactory<AutoCAC.Models.mainContext> DbFactory

<h3>Menu Builder: @currentMenu?.DisplayText (@Id)</h3>
<RadzenButton 
    Text="Commit Changes"
    Icon="list_alt"
    ButtonStyle="ButtonStyle.Primary"
    Click="@(() => NavigationManager.NavigateTo($"/menubuild/{Id}/commit"))" />
<div class="grid" style="display: grid; grid-template-columns: repeat(@maxCol, 1fr); gap: 20px;">
    @for (int row = 1; row <= MaxRow; row++)
    {
        var currentRow = row;
        for (int col = 1; col <= maxCol; col++)
        {
            var currentCol = col;
            var newCell = newItems?.FirstOrDefault(m => m.RowNum == row && m.ColNum == col);
            var oldCell = oldItems?.FirstOrDefault(m => m.RowNum == row && m.ColNum == col);
            var oldDescription = DescribeOldItem(oldCell);
            <RadzenCard title="@oldDescription">
                @if (newCell is not null)
                {
                    if (newCell.DisplayOnly == "YES-HEADER")
                    {
                        <strong>@newCell.DisplayText</strong>
                    }
                    else if (newCell.DisplayOnly == "YES")
                    {
                        <span>@newCell.DisplayText</span>
                    }
                    else if (newCell.DisplayOnly == "PLACEHOLDER")
                    {
                        <RadzenButton Variant="Variant.Flat" Click="@(() => EditPlaceholder(newCell))">@($"Placeholder: {newCell.DisplayText}")</RadzenButton>
                    }
                    else if (newCell.Item is not null)
                    {
                        <RadzenButton Variant="Variant.Text" Click="@(() => ShowOrderDetails(newCell.Item))">@($"{newCell.Mnemonic} {newCell.Item.DisplayText}")</RadzenButton>
                    }
                    <RadzenButton Text="@($"{(string.IsNullOrWhiteSpace(oldDescription) ? "Cancel item" : $"Revert back to {oldDescription}")}")" Icon="undo" 
                    ButtonStyle="ButtonStyle.Info" Click="@(() => DeleteItem(newCell))" class="rz-ml-2"/>
                }
                else
                {
                    <RadzenSplitButton Text="@($"{(string.IsNullOrWhiteSpace(oldDescription) ? "ADD" : $"Change from {oldDescription}")}")"
                    AlwaysOpenPopup="true"
                    Size="ButtonSize.Small"
                    ButtonStyle="ButtonStyle.Primary"
                    Click="@(item => OnSplitButtonClick(currentRow, currentCol, item))"
                    Style="width: 100%;">
                        <ChildContent>
                            <RadzenSplitButtonItem Text="Text" Value="Text" />
                            <RadzenSplitButtonItem Text="Order Dialog" Value="Order Dialog" />
                            <RadzenSplitButtonItem Text="Empty Cell" Value="Delete" />
                            <RadzenSplitButtonItem Text="Move below items UP" Value="MoveUp" />
                        </ChildContent>
                    </RadzenSplitButton>
                }
                <RadzenButton 
                    Text="Shift Down" 
                    ButtonStyle="ButtonStyle.Light" 
                    Style="margin-top: 5px;" 
                    Click="@(() => MoveItems(currentRow-1, currentCol, MoveTarget.Below, 1))" />
            </RadzenCard>
        }
    }
</div>
<RadzenButton Text="Add Row" ButtonStyle="ButtonStyle.Secondary" Click="@AddRow" Style="margin-top: 10px;" />
<RPMSOutput @ref="RPMSRef">
    @{
        if (newItems?.Any()==true)
        {
            <RadzenColumn>
                <RadzenCarousel ButtonShade="Radzen.Shade.Darker" Style="height: 30px; text-align: center" AllowPaging="false" Auto="false">
                    <Items>
                        @foreach (var item in newItems.Where(i => i.DisplayOnly == "PLACEHOLDER"))
                        {
                            <RadzenCarouselItem>
                                <RadzenTextBox 
                                    @bind-Value="item.DisplayText" 
                                    Style="width: 75%;" 
                                    Change="@(() => SaveItem(item))" />
                            </RadzenCarouselItem>
                        }
                    </Items>
                </RadzenCarousel>
            </RadzenColumn>
            <RadzenColumn>
                <RadzenButton Text="Transfer from RPMS to DB" Click="@OrderDialogsRpmsToDb" />
            </RadzenColumn>
        }
    }
</RPMSOutput>
@code {
    [Parameter] public int Id { get; set; }
    private RPMSOutput RPMSRef;
    private List<AutoCAC.Models.MenuBuild> newItems;
    private List<AutoCAC.Models.OrderMenu> oldItems;
    private OrderDialog currentMenu;
    private mainContext db;
    private int additionalRows = 0;
    private int MaxRow => Math.Max(
        newItems?.Any()==true ? newItems.Max(mb => mb.RowNum) : 1,
        oldItems?.Any()==true ? oldItems.Max(om => om.RowNum ?? 1) : 1
    ) + additionalRows;

    private int maxCol = 1;

    protected override async Task OnInitializedAsync()
    {
        db = await DbFactory.CreateDbContextAsync();

        currentMenu = await db.OrderDialogs.FirstOrDefaultAsync(o => o.Id == Id);
        newItems = await db.MenuBuilds
            .Include(mb => mb.Item)
            .Where(mb => mb.MenuId == Id)
            .ToListAsync();
        oldItems = await db.OrderMenus
            .Where(om => om.Id == Id)
            .ToListAsync();

        // Column count based on OrderDialog.ColumnWidth
        if (currentMenu?.ColumnWidth is double width)
        {
            maxCol = width < 27.0 ? 4 :
                     width < 40.0 ? 3 :
                     width < 79.0 ? 2 : 1;
        }
    }

    private void AddRow()
    {
        additionalRows++;
        StateHasChanged();
    }

    public enum MoveTarget
    {
        Above,
        Below
    }

    private async Task MoveItems(int startRow, int col, MoveTarget target, int moveRows = -1)
    {
        var affectedItems = newItems
            .Where(mb => mb.ColNum == col && (
                target == MoveTarget.Above ? mb.RowNum < startRow :
                target == MoveTarget.Below ? mb.RowNum > startRow : false))
            .OrderByDescending(mb => mb.RowNum * moveRows) // key trick: update in order that avoids PK collisions
            .ToList();

        if (affectedItems.Any())
        {
            using var transaction = await db.Database.BeginTransactionAsync();

            try
            {
                // Delete originals
                foreach (var item in affectedItems)
                {
                    db.MenuBuilds.Remove(item);
                }
                await db.SaveChangesAsync();

                // Re-insert modified
                foreach (var item in affectedItems)
                {
                    item.RowNum += moveRows;
                    db.MenuBuilds.Add(item);
                }
                await db.SaveChangesAsync();

                await transaction.CommitAsync();
            }
            catch
            {
                await transaction.RollbackAsync();
                throw;
            }


            newItems = await db.MenuBuilds
                .Include(mb => mb.Item)
                .Where(mb => mb.MenuId == Id)
                .ToListAsync();

            StateHasChanged();
        }
    }


    private async Task OnSplitButtonClick(int row, int col, RadzenSplitButtonItem item)
    {
        switch (item.Value)
        {
            case "Text":
                var txtField = new TextField
                {
                    MaxLength = (int)currentMenu.ColumnWidth
                };

                var txtresult = await DialogService.OpenAsync<TextEntryModal>(
                    "Enter text",
                    new Dictionary<string, object> { { "Model", txtField } }
                );

                if (txtresult is TextField tf && !string.IsNullOrWhiteSpace(tf.Txt))
                {
                    await AddItem(new AutoCAC.Models.MenuBuild
                    {
                        MenuId = Id,
                        DisplayText = tf.Txt,
                        DisplayOnly = tf.Header ? "YES-HEADER" : "YES",
                        RowNum = row,
                        ColNum = col
                    });
                }
                break;
            case "Order Dialog":
                var qo = await DialogService.OpenAsync<OrderDialogSelect>("Order Dialog", options: new DialogOptions{ Width = "75%", Resizable = true});
                if (qo != null)
                {
                    if (qo is string qostr)
                    {
                        await AddItem(new AutoCAC.Models.MenuBuild
                        {
                            MenuId = Id,
                            DisplayText = qostr,
                            DisplayOnly = "PLACEHOLDER",
                            RowNum = row,
                            ColNum = col
                        });
                    }
                    else if (qo is AutoCAC.Models.OrderDialog qoDialog)
                    {
                        await AddItem(new AutoCAC.Models.MenuBuild
                        {
                            MenuId = Id,
                            ItemId = qoDialog.Id,
                            RowNum = row,
                            ColNum = col
                        });
                    }
                }
                break;
            case "Delete":
                await AddItem(new AutoCAC.Models.MenuBuild
                {
                    MenuId = Id,
                    RowNum = row,
                    ColNum = col
                });
                break;
            case "MoveUp":
                await MoveItems(row, col, MoveTarget.Below);
                break;
        }
    }

    public async Task AddItem(AutoCAC.Models.MenuBuild item)
    {
        db.MenuBuilds.Add(item);
        await db.SaveChangesAsync();

        // Explicitly load the related OrderDialog entity
        if (item.ItemId.HasValue)
        {
            item.Item = await db.OrderDialogs.FindAsync(item.ItemId.Value);
        }

        newItems.Add(item);
        StateHasChanged();
    }

    private async Task EditPlaceholder(MenuBuild item)
    {
        var result = await DialogService.OpenAsync<OrderDialogSelect>(
            item.DisplayText,
            new Dictionary<string, object>
            {
                { "SearchText", item.DisplayText }
            },
            new DialogOptions { Width = "75%", Resizable = true }
        );
        if (result == null) return;


        if (result is string newText && !string.IsNullOrWhiteSpace(newText))
        {
            item.DisplayText = newText;
            item.ItemId = null;
        }
        else if (result is OrderDialog selectedDialog)
        {
            item.DisplayText = null;
            item.ItemId = selectedDialog.Id;
            item.DisplayOnly = null;
        }

        db.MenuBuilds.Update(item);
        await db.SaveChangesAsync();
        if (item.ItemId.HasValue)
        {
            item.Item = await db.OrderDialogs.FindAsync(item.ItemId.Value);
        }

        await InvokeAsync(StateHasChanged);
    }

    public class TextField
    {
        public string Txt { get; set; }
        public bool Header { get; set; } = true;
        public int MaxLength { get; set; }
    }

    public async Task DeleteItem(AutoCAC.Models.MenuBuild item)
    {
        bool? confirmed = await DialogService.Confirm("Are you sure you want to undo changes for this item?", "Undo Change");
        if (confirmed == true)
        {
            db.MenuBuilds.Remove(item);
            await db.SaveChangesAsync();

            newItems.Remove(item);
            StateHasChanged();
        }
    }

    private async Task SaveItem(MenuBuild item)
    {
        db.MenuBuilds.Update(item);
        await db.SaveChangesAsync();
    }

    private async Task ShowOrderDetails(OrderDialog order)
    {
        if (order.Type == "quick order")
        {
            var responses = order.ParsedItems as List<ResponseItem>;

            await DialogService.OpenAsync("Quick Order Details", ds =>
                @<div style="padding: 1rem; max-height: 500px; overflow-y: auto;">
                    @foreach (var item in responses)
                    {
                        if (!string.IsNullOrWhiteSpace(item.Value) || !string.IsNullOrWhiteSpace(item.Text))
                        {
                            <div>
                                <strong>@item.Dialog.Replace("OR GTX ", "")</strong>:
                                <span style="white-space: normal">
                                    @(!string.IsNullOrWhiteSpace(item.Value) ? item.Value : item.Text)
                                </span>
                            </div>
                        }
                    }
                </div>
    );            
        }
    }
    private string DescribeOldItem(AutoCAC.Models.OrderMenu oldCell)
    {
        if (oldCell == null)
            return "";

        const string prefix = "Existing ";

        return oldCell.DisplayOnly switch
        {
            "YES-HEADER" => $"{prefix}Header: {oldCell.DisplayText}",
            "YES" => $"{prefix}Text: {oldCell.DisplayText}",
            _ => $"{prefix}Order: {oldCell.ItemDisplay}"
        };
    }

    private async Task OrderDialogsRpmsToDb()
    {
        await RPMSRef.RunUpdateFromRPMS("OrderDialog", async () =>
        {
            foreach (var item in newItems.Where(i => i.DisplayOnly == "PLACEHOLDER").ToList())
            {
                await EditPlaceholder(item);
            }
        });
    }


}

