@page "/supervisor/inpatient/NightShiftRotation/edit"
@page "/supervisor/inpatient/NightShiftRotation/edit/{SelectedUsername}"
@using AutoCAC.Models
@inject DialogService DialogService
@inject NavigationManager Nav
@inject IDbContextFactory<mainContext> DbFactory

<AuthorizedGroups Groups="@(new[] { "PharmacistSupervisor" })">
    <RadzenButton ButtonType="ButtonType.Button" Text="Back to Totals table" Icon="arrow_back"
    Click="@(() => Nav.NavigateTo("/supervisor/inpatient/nightshiftrotation"))" />
    <DataGridEditable TItem="NightShiftRotation" QueryFactory="@QueryFactory"
                      AddAction="AddRotationAsync">
        <RadzenDataGridColumn TItem="NightShiftRotation" Property="StaffUserName" Title="Staff User" />

        <RadzenDataGridColumn TItem="NightShiftRotation" Property="StartDate" Title="Start Date">
            <EditTemplate Context="r">
                <RadzenDatePicker TValue="DateTime?" DateFormat="MM/dd/yyyy"
                                  Value="@(ToDateTime(r.StartDate))"
                                  Change="@(dt => OnDateChanged(r, "Start", dt))"
                                  Style="width:100%" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="NightShiftRotation" Property="EndDate" Title="End Date">
            <EditTemplate Context="r">
                <RadzenDatePicker TValue="DateTime?" DateFormat="MM/dd/yyyy"
                                  Value="@(ToDateTime(r.EndDate))"
                                  Change="@(dt => OnDateChanged(r, "End", dt))"
                                  Style="width:100%" />
            </EditTemplate>
        </RadzenDataGridColumn>
    </DataGridEditable>
</AuthorizedGroups>

@code {
    [Parameter] public string SelectedUsername { get; set; }
    private IQueryable<NightShiftRotation> QueryFactory()
    {
        IQueryable<NightShiftRotation> qry = DbFactory.QueryFromObj<NightShiftRotation>().AsNoTracking();
        qry = qry.OrderByDescending(x => x.EndDate);
        if (string.IsNullOrWhiteSpace(SelectedUsername)) return qry;
        return qry.Where(x => x.StaffUserName == SelectedUsername);

    }
    private async Task<NightShiftRotation> AddRotationAsync()
    {
        string user;
        if (SelectedUsername!=null)
        {
            user = SelectedUsername;
        }
        else
        {    
            var adUser = await DialogService.StaffAdDialog(AdGroupHelper.Pharmacist);
            if (adUser is null || string.IsNullOrWhiteSpace(adUser.SamAccountName))
                return null;
            user = $"d1_{adUser.SamAccountName}";
        }

        return new NightShiftRotation
        {
            StaffUserName = user
        };
    }

    private void OnDateChanged(NightShiftRotation record, string field, DateTime? dt)
    {
        var dateOnly = FromDateTime(dt);
        switch (field)
        {
            case "Start":
                if (dateOnly.HasValue)
                    record.StartDate = dateOnly.Value;
                break;
            case "End":
                if (dateOnly.HasValue)
                    record.EndDate = dateOnly.Value;
                break;
        }

        // Optional guard: keep EndDate >= StartDate
        if (record.EndDate < record.StartDate)
        {
            record.EndDate = record.StartDate.AddDays(6);
        }
    }

    private static DateTime? ToDateTime(DateOnly d) => d.ToDateTime(TimeOnly.MinValue);
    private static DateOnly? FromDateTime(DateTime? dt) => dt.HasValue ? DateOnly.FromDateTime(dt.Value) : null;
}
