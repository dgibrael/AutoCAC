@page "/piverify/{Id:int}"
@using AutoCAC.Components.Templates.Buttons
@using AutoCAC.Components.Templates.Forms
@using AutoCAC.Extensions
@using AutoCAC.Models
@inject IDbContextFactory<mainContext> Db
@inject AutoCAC.Services.UserContextService UserContext
@inject NavigationManager Nav
@inject DialogService DialogService
@inject NotificationService NotificationService
<PageTitle>Private Insurance Verification</PageTitle>
<AuthorizedGroups Groups="@(new[] { "PharmacyTech", "Pharmacist", "PharamcytechSupervisor", "PharmacistSupervisor", "InsuranceVerifier" })">
    <BackLink />
    @if (notFound)
    {
        <p>Record not found</p>
    }
    else if (_piVerification is null)
    {
        <span>Loading...</span>
    }
    else
    {
        <h3>@($"Private Insurance Verification for {_piVerification.Patient?.Name} ({_piVerification.Patient?.ChartNumber}). Status: {_piVerification?.CurrentStatus}")</h3>

        <RadzenTemplateForm Data="@_piVerification" Submit="@InsuranceSave" TItem="AutoCAC.Models.PiVerification" >
            <RadzenCard Variant="Variant.Outlined" >
                <RadzenStack Orientation="Orientation.Horizontal" Gap="5px">
                    <RadzenText TextStyle="TextStyle.DisplayH4" Text="Insurance Information:" Style="margin-bottom: 1px; margin-top: 0px" />
                    <RadzenButton Click="@(() => ToggleInsuranceEdit(true))" ButtonType="ButtonType.Button" Icon="edit" Text="Edit Insurance Info" Size="ButtonSize.Medium" 
                        Visible="@(!_insuranceEditMode)"/>
                </RadzenStack>
                <RadzenStack Orientation="Orientation.Horizontal">
                    <RadzenCard>
                        <RadzenLabel Text="BIN" />
                        <RadzenTextBox ReadOnly="@(!_insuranceEditMode)" @bind-Value="_piVerification.Bin" />
                    </RadzenCard>
                    <RadzenCard>
                        <RadzenLabel Text="PCN" />
                        <RadzenTextBox ReadOnly="@(!_insuranceEditMode)" @bind-Value="_piVerification.Pcn" />
                    </RadzenCard>
                    <RadzenCard>
                        <RadzenLabel Text="Group ID" />
                        <RadzenTextBox ReadOnly="@(!_insuranceEditMode)" @bind-Value="_piVerification.GroupId" />
                    </RadzenCard>
                    <RadzenCard>
                        <RadzenLabel Text="Cardholder ID" />
                        <RadzenTextBox ReadOnly="@(!_insuranceEditMode)" @bind-Value="_piVerification.CardholderId" />
                    </RadzenCard>
                </RadzenStack>
                <StandardButtons CancelClick="@(() => ToggleInsuranceEdit(false))" Visible="@_insuranceEditMode"/>
            </RadzenCard>
        </RadzenTemplateForm>
        
        <ChatTemplate TItem="PiVerificationComment"
                        Title="Comments"
                        LoadData="LoadCommentsAsync"
                        GetMessageId="@(c => c.Id.ToString())"
                        GetUser="@(c => c.CreatedBy)"
                        GetMessage="@(c => $"[{c.CommentStep}] {c.Comment}")"
                        GetTimestamp="@(c => c.CreatedAt)"
                        CreateMessage="@CreateComment"
                        />
        <SplitButtonTemplate Buttons="BuildButtons" ButtonText="Actions"/>
    }
</AuthorizedGroups>

@code {
    [Parameter] public int Id { get; set; }
    private bool _insuranceEditMode = false;
    private PiVerification _piVerification;
    private bool notFound { get; set; } = false;
    protected override async Task OnInitializedAsync()
    {
        await UserContext.EnsureInitializedAsync();
        await LoadPiVerification();
    }

    private async Task LoadPiVerification()
    {
        await using var db = Db.CreateDbContext();
        _piVerification = await db.PiVerifications
            .Where(x => x.Id == Id)
            .Include(x => x.Patient)
            .FirstOrDefaultAsync();
        notFound = _piVerification == null;
    }

    // ChatTemplate hooks
    private async Task<IEnumerable<PiVerificationComment>> LoadCommentsAsync()
    {
        await using var db = Db.CreateDbContext();
        return await db.PiVerificationComments
            .Where(x => x.PiVerificationId == Id)
            .OrderBy(x => x.CreatedAt)
            .ToListAsync();
    }

    private PiVerificationComment CreateComment(string content)
    {
        return new PiVerificationComment
        {
            PiVerificationId = Id,
            Comment = content,
            CreatedAt = DateTime.Now,
            CreatedBy = UserContext.Username,
            CommentStep = _piVerification.CurrentStatus
        };
    }

    private void ToggleInsuranceEdit(bool? setTo)
    {
        _insuranceEditMode = setTo ?? !_insuranceEditMode;
        StateHasChanged();
    }

    private async Task InsuranceSave()
    {
        await Db.UpdateItemAsync(_piVerification);
        await LoadPiVerification();
        _insuranceEditMode = false;
        NotificationService.Success("insurance information saved");
        StateHasChanged();
    }
    private List<string> statusChoices = new() { "New", "Submitted", "Verified", "Completed" };

    IEnumerable<SplitButtonItem> BuildButtons => new[]
    {
        new SplitButtonItem
        {
            Text = "Move Back",
            Value = "Back",
            Icon = "undo",
            IconColor = Colors.WarningLight,
            Disabled = () => _piVerification.CurrentStatus == "New",
            Action = async () =>
            {
                var newStatus = statusChoices.Previous(_piVerification.CurrentStatus);
                _piVerification.CurrentStatus = newStatus;
                _piVerification.LastModified = DateTime.Now;
                await Db.UpdateItemAsync(_piVerification);
                await LoadPiVerification();
                NotificationService.Success($"Status updated to {newStatus}");
                StateHasChanged();
            }
        },
        new SplitButtonItem
        {
            Text = "Move to Next Step",
            Value = "Forward",
            Icon = "done_all",
            IconColor = Colors.Success,
            Disabled = () => _piVerification.CurrentStatus == "Completed",
            Action = async () =>
            {
                var newStatus = statusChoices.Next(_piVerification.CurrentStatus);
                _piVerification.CurrentStatus = newStatus;
                _piVerification.LastModified = DateTime.Now;
                await Db.UpdateItemAsync(_piVerification);
                await LoadPiVerification();
                NotificationService.Success($"Status updated to {newStatus}");
                StateHasChanged();
            }
        },
        new SplitButtonItem
        {
            Text = "Delete Record",
            Value = "Delete",
            Icon = "delete",
            IconColor = Colors.Danger,
            Action = async () =>
            {
                var confirm = await DialogService.DeleteConfirm("Insurance Verification Record");
                if (confirm == true)
                {
                    await Db.DeleteItemAsync(_piVerification);
                    Nav.NavigateToRelative(fromParent: true);
                }
            }
        }
    };

}
