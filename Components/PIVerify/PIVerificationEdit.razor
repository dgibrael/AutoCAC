@page "/piverify/{Id:int}"
@using AutoCAC.Components.Templates.Buttons
@using AutoCAC.Extensions
@using AutoCAC.Models
@inject IDbContextFactory<mainContext> Db
@inject AutoCAC.Services.UserContextService UserContext

<PageTitle>Private Insurance Verification</PageTitle>

@if (_piVerification is null)
{
    <span>Loading...</span>
}
else
{
    <h3>@($"Private Insurance Verification for {_piVerification.Patient.Name} ({_piVerification.Patient.ChartNumber})")</h3>

    <RadzenTemplateForm Data="@_piVerification">
        <RadzenStack Orientation="Orientation.Horizontal" Gap="5px">
            <RadzenText TextStyle="TextStyle.DisplayH4" Text="Insurance Information:" Style="margin-bottom: 1px; margin-top: 0px" />
            <RadzenButton Click="ToggleInsuranceEdit" ButtonType="ButtonType.Button" Icon="edit" Text="Edit Insurance Info" Size="ButtonSize.Medium" />
        </RadzenStack>
        <RadzenStack Orientation="Orientation.Horizontal">
            <RadzenCard>
                <RadzenLabel Text="BIN" />
                <RadzenTextBox Disabled="@(!_insuranceEditMode)" @bind-Value="_piVerification.Bin" />
            </RadzenCard>
            <RadzenCard>
                <strong>PCN</strong>
                <span>@_piVerification.Pcn</span>
            </RadzenCard>
            <RadzenCard>
                <strong>Group ID</strong>
                <span>@_piVerification.GroupId</span>
            </RadzenCard>
            <RadzenCard>
                <strong>Cardholder ID</strong>
                <span>@_piVerification.CardholderId</span>
            </RadzenCard>
        </RadzenStack>
    </RadzenTemplateForm>
    <RadzenPanel class="rz-my-5">
        <RadzenCard>
            <strong>Status</strong>
            <span>@_piVerification.CurrentStatus</span>
        </RadzenCard>
    </RadzenPanel>
        
    <ChatTemplate TItem="PiVerificationComment"
                    Title="Comments"
                    LoadData="LoadCommentsAsync"
                    GetMessageId="@(c => c.Id.ToString())"
                    GetUser="@(c => c.CreatedBy)"
                    GetMessage="@(c => $"[{c.CommentStep}] {c.Comment}")"
                    GetTimestamp="@(c => c.CreatedAt)"
                    CreateMessage="@CreateComment"
                    />

    <DeleteButton Item="@_piVerification"
                    Size="ButtonSize.Medium"
                    Text="Delete Insurance Verification Record" />
}

@code {
    [Parameter] public int Id { get; set; }
    private bool _insuranceEditMode = false;
    private PiVerification _piVerification;

    protected override async Task OnInitializedAsync()
    {
        await UserContext.InitializeAsync();
        await LoadPiVerification();
    }

    private async Task LoadPiVerification()
    {
        await using var db = Db.CreateDbContext();
        _piVerification = await db.PiVerifications
            .Where(x => x.Id == Id)
            .Include(x => x.Patient)
            .FirstOrDefaultAsync();
    }

    // ChatTemplate hooks
    private async Task<IEnumerable<PiVerificationComment>> LoadCommentsAsync()
    {
        await using var db = Db.CreateDbContext();
        return await db.PiVerificationComments
            .Where(x => x.PiVerificationId == Id)
            .OrderBy(x => x.CreatedAt)
            .ToListAsync();
    }

    private PiVerificationComment CreateComment(string content)
    {
        return new PiVerificationComment
        {
            PiVerificationId = Id,
            Comment = content,
            CreatedAt = DateTime.Now,
            CreatedBy = UserContext.Username,
            CommentStep = _piVerification.CurrentStatus
        };
    }
    private void ToggleInsuranceEdit()
    {
        _insuranceEditMode = !_insuranceEditMode;
        StateHasChanged();
    }
}
