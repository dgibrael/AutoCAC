@page "/piverify"
@using AutoCAC.Models
@inject DialogService DialogService
@inject NavigationManager Nav
@inject AutoCAC.Services.UserContextService UserContext
@using AutoCAC.Components.Templates.PatientSearch
@using AutoCAC.Components.Templates
@inject IDbContextFactory<AutoCAC.Models.mainContext> DbFactory
<PageTitle>Private Insurance Verification</PageTitle>
<div class="content-container--wide">
    <AuthorizedGroups Groups="@(new[] { "PharmacyTech", "Pharmacist", "PharamcytechSupervisor", "PharmacistSupervisor", "InsuranceVerifier" })">
        <DataGridVanilla TItem="PiVerification" QueryFactory="@QueryFactory" SearchColumns="@(new[] { "Patient.Name", "Patient.ChartNumber" })" 
        AddButtonDefault="true">
            <ChildContent>
                <RadzenDataGridColumn TItem="PiVerification" Property="Patient.Name" Title="Patient"/>
                <RadzenDataGridColumn TItem="PiVerification" Property="Patient.ChartNumber" Title="Chart #"/>
                <RadzenDataGridColumn TItem="PiVerification" Property="CurrentStatus" Title="Status" FilterMode="FilterMode.CheckBoxList" Width="150px"/>
                <RadzenDataGridColumn TItem="PiVerification" Property="Bin" Title="BIN" Width="100px"/>
                <RadzenDataGridColumn TItem="PiVerification" Property="Pcn" Title="PCN" Width="150px"/>
                <RadzenDataGridColumn TItem="PiVerification" Property="GroupId" Title="Group ID" Width="150px"/>
                <RadzenDataGridColumn TItem="PiVerification" Property="CardholderId" Title="Cardholder ID"/>
                <RadzenDataGridColumn TItem="PiVerification" Property="LastModified" Title="Last Modified" />
                <ActionColumn Context="t" TItem="PiVerification" ShowDeleteWhen="@(x => x.CreatedBy == currentUsername)">
                    @{
                        string curStatus = t.CurrentStatus;
                        string nextStatus = statusChoices.Next(curStatus);
                        string prevStatus = statusChoices.Previous(curStatus);
                    }
                    @if(curStatus != "New")
                    {
                        <span title="move back">
                            <RadzenButton Icon="arrow_back" ButtonStyle="ButtonStyle.Warning" Variant="Variant.Flat" />
                        </span>
                    }
                    @if(curStatus != "Completed")
                    {
                        <span title="Complete">
                            <RadzenButton Icon="arrow_forward" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" />
                        </span>
                    }
                </ActionColumn>
            </ChildContent>
        </DataGridVanilla>
    </AuthorizedGroups>
</div>

@code {
    private string currentUsername;
    private List<string> statusChoices = new() { "New", "Submitted", "Verified", "Completed" };
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await UserContext.InitializeAsync();
            currentUsername = UserContext.Username;
            await InvokeAsync(StateHasChanged);
        }
    }
    private IQueryable<AutoCAC.Models.PiVerification> QueryFactory()
    {
        IQueryable<AutoCAC.Models.PiVerification> qry = DbFactory.QueryFromObj<AutoCAC.Models.PiVerification>().AsNoTracking();
        return qry.Include(x => x.Patient).Include(x => x.PiVerificationComments);
    }
}
