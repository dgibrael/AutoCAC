@page "/piverify"
@using AutoCAC.Models
@inject DialogService DialogService
@inject AutoCAC.Services.UserContextService UserContext
@using AutoCAC.Components.Templates.PatientSearch
@inject IDbContextFactory<AutoCAC.Models.mainContext> DbFactory
<PageTitle>Private Insurance Verification</PageTitle>
<div class="content-container--wide">
    <AuthorizedGroups Groups="@(new[] { "PharmacistSupervisor" })">
        <DataGridEditable TItem="PiVerification" AddAction="AddRecordAsync" QueryFactory="@QueryFactory">
            <ChildContent>
                <RadzenDataGridColumn TItem="PiVerification" Property="PatientId" Title="Patient" FilterProperty="Patient.Name">
                    <Template Context="x">
                        @x?.Patient?.Name
                    </Template>
                    <EditTemplate Context="r">
                        <PatientDropDownGrid @bind-Value="r.PatientId" />
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="PiVerification" Property="CurrentStatus" Title="Status" FilterMode="FilterMode.CheckBoxList" Width="150px">
                    <EditTemplate Context="t">
                        <RadzenDropDown TValue="string" Data="@statusChoices" @bind-Value="t.CurrentStatus" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="PiVerification" Property="Bin" Title="BIN" Width="100px">
                    <EditTemplate Context="r">
                        <RadzenTextBox @bind-Value="r.Bin" Style="width:100%" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="PiVerification" Property="Pcn" Title="PCN">
                    <EditTemplate Context="r">
                        <RadzenTextBox @bind-Value="r.Pcn" Style="width:100%" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="PiVerification" Property="GroupId" Title="Group ID">
                    <EditTemplate Context="r">
                        <RadzenTextBox @bind-Value="r.GroupId" Style="width:100%" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="PiVerification" Property="CardholderId" Title="Cardholder ID">
                    <EditTemplate Context="r">
                        <RadzenTextBox @bind-Value="r.CardholderId" Style="width:100%" />
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="PiVerification" Property="LastModified" Title="Last Modified"/>
            </ChildContent>
            <RowButtonsViewMode Context="t">
                @{
                    string curStatus = t.CurrentStatus;
                    string nextStatus = statusChoices.Next(curStatus);
                    string prevStatus = statusChoices.Previous(curStatus);
                }
                @if(curStatus != "New")
                {
                    <span title="move back">
                        <RadzenButton Icon="arrow_back" ButtonStyle="ButtonStyle.Warning" Variant="Variant.Flat" />
                    </span>
                }
                @if(curStatus != "Completed")
                {
                    <span title="Complete">
                        <RadzenButton Icon="arrow_forward" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" />
                    </span>
                }
            </RowButtonsViewMode>
        </DataGridEditable>
    </AuthorizedGroups>
</div>

@code {
    private List<string> statusChoices = new() { "New", "Submitted", "Verified", "Completed" };
    private IQueryable<AutoCAC.Models.PiVerification> QueryFactory()
    {
        IQueryable<AutoCAC.Models.PiVerification> qry = DbFactory.QueryFromObj<AutoCAC.Models.PiVerification>().AsNoTracking();
        return qry.Include(x => x.Patient).Include(x => x.PiVerificationComments);

    }
    private Task<PiVerification> AddRecordAsync()
    {
        return Task.FromResult(new PiVerification
        {
            LastModified = DateTime.Now,
            CurrentStatus = "New",
            CreatedBy = UserContext.Username,
            CreatedAt = DateTime.Now
        });
    }
}
