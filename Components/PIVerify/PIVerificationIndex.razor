@page "/piverify"
@using AutoCAC.Models
@inject DialogService DialogService
@inject NavigationManager Nav
@inject AutoCAC.Services.UserContextService UserContext
@using AutoCAC.Components.Templates.PatientSearch
@using AutoCAC.Components.Templates
@inject IDbContextFactory<AutoCAC.Models.mainContext> DbFactory
<PageTitle>Private Insurance Verification</PageTitle>
<div class="content-container--wide">
    <AuthorizedGroups Groups="@(new[] { "PharmacyTech", "Pharmacist", "PharamcytechSupervisor", "PharmacistSupervisor", "InsuranceVerifier" })">
        <DataGridVanilla TItem="PiVerification" QueryFactory="@QueryFactory()" SearchColumns="@(new[] { "Patient.Name", "Patient.ChartNumber" })" @ref="grid" 
        AddButtonDefault="false">
            <HeaderContent> <PatientDialogButton AfterPatientSelect="NewPatientSelect" /> </HeaderContent>
            <ChildContent>
                <RadzenDataGridColumn TItem="PiVerification" Property="Patient.Name" Title="Patient"/>
                <RadzenDataGridColumn TItem="PiVerification" Property="Patient.ChartNumber" Title="Chart #"/>
                <RadzenDataGridColumn TItem="PiVerification" Property="CurrentStatus" Title="Status" FilterMode="FilterMode.CheckBoxList" Width="150px"/>
                <RadzenDataGridColumn TItem="PiVerification" Property="Bin" Title="BIN" Width="100px"/>
                <RadzenDataGridColumn TItem="PiVerification" Property="Pcn" Title="PCN" Width="150px"/>
                <RadzenDataGridColumn TItem="PiVerification" Property="GroupId" Title="Group ID" Width="150px"/>
                <RadzenDataGridColumn TItem="PiVerification" Property="CardholderId" Title="Cardholder ID"/>
                <RadzenDataGridColumn TItem="PiVerification" Property="LastModified" Title="Last Modified" />
                <ActionColumn Context="t" TItem="PiVerification" ShowDeleteWhen="@(x => x.CreatedBy == currentUsername)" Grid="grid.Grid">
                    @if (t.CurrentStatus != "New")
                    {
                        <span title="move back">
                            <RadzenButton Icon="arrow_back" ButtonStyle="ButtonStyle.Warning" Variant="Variant.Text" />
                        </span>
                    }
                    @if (t.CurrentStatus != "Completed")
                    {
                        <span title="Complete">
                            <RadzenButton Icon="arrow_forward" ButtonStyle="ButtonStyle.Success" Variant="Variant.Text" />
                        </span>
                    }
                </ActionColumn>
            </ChildContent>
        </DataGridVanilla>
    </AuthorizedGroups>
</div>

@code {
    private DataGridVanilla<PiVerification> grid;
    private string currentUsername;
    private List<string> statusChoices = new() { "New", "Submitted", "Verified", "Completed" };
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await UserContext.EnsureInitializedAsync();
            currentUsername = UserContext.Username;
            await InvokeAsync(StateHasChanged);
        }
    }
    private Func<AutoCAC.Models.mainContext, IQueryable<AutoCAC.Models.PiVerification>> QueryFactory()
    {
        return db => db.PiVerifications
            .Include(x => x.Patient)
            .Include(x => x.PiVerificationComments)
            .AsNoTracking();
    }

    private async Task NewPatientSelect(AutoCAC.Models.Patient selected)
    {
        var existingRecord = await DbFactory.GetByExpressionAsync<PiVerification>(x => x.PatientId == selected.Id);
        if (existingRecord != null)
        {
            var continueAnyway = await DialogService.YesNoDialog("Patient already exists. Click yes to create a new record anyway. Click no to view existing record.", "Duplicate");
            if (continueAnyway != true)
            {
                Nav.NavigateTo(Nav.GetPathWith(existingRecord.Id.ToString()));
                return;
            }
        }
        Models.PiVerification piVerification = new Models.PiVerification
        {
            PatientId = selected.Id,
            CreatedAt = DateTime.Now,
            LastModified = DateTime.Now,
            CreatedBy = UserContext.Username,
            CurrentStatus = "New"
        };
        var dbRecord = await DbFactory.AddItemAsync(piVerification);
        Nav.NavigateTo(Nav.GetPathWith(dbRecord.Id.ToString()));
    }
}
