@inherits LayoutComponentBase
@inject CookieThemeService CookieThemeService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject DialogService DialogService
@using System.Text
@inject IJSRuntime JS

<RadzenComponents />
<RadzenDialog />

<RadzenLayout style="grid-template-areas: 'rz-sidebar rz-header' 'rz-sidebar rz-body';">
    <RadzenHeader>
        <RadzenRow JustifyContent="JustifyContent.Start" AlignItems="AlignItems.Center" Gap="0">
            <RadzenColumn Size="5">
                <RadzenSidebarToggle Click="@SidebarToggleClick"></RadzenSidebarToggle>
            </RadzenColumn>
            <RadzenColumn Size="7">
                <RadzenStack AlignItems="AlignItems.Center" Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0.5rem" class="rz-px-2">
                    <RadzenAppearanceToggle />
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
    </RadzenHeader>
    <RadzenBody Expanded="@sidebarExpanded" id="mainContent">
        <RadzenRow class="rz-mx-auto rz-px-4 rz-pt-2 rz-pt-md-4 rz-pt-lg-6 rz-pt-xl-12 rz-pb-2 rz-pb-lg-12" Style="max-width: 1440px;">
            <RadzenColumn Size="12">
                <CascadingValue Value="this" Name="MainLayout">
                    @Body
                </CascadingValue>
            </RadzenColumn>
        </RadzenRow>
    </RadzenBody>
    <RadzenSidebar @bind-Expanded="@sidebarExpanded" style="z-index: 2">
        <RadzenStack AlignItems="Radzen.AlignItems.Center" class="rz-py-4 rz-py-lg-6" Style="padding: var(--rz-panel-menu-item-padding); border-bottom: var(--rz-panel-menu-item-border);">
            <RadzenImage Path="images/logo.png"  style="width: 48px; height: 48px;" AlternateText="Application logo"></RadzenImage>
            <RadzenText Text="AutoCAC" TextStyle="Radzen.Blazor.TextStyle.Subtitle1" class="rz-mb-0" style="color: var(--rz-sidebar-color);" />
        </RadzenStack>
        <RadzenPanelMenu>
            <RadzenPanelMenuItem Text="Home" Path="" />
            <RadzenPanelMenuItem Text="Drug Enter Edit" Path="drugenteredit" />
            <RadzenPanelMenuItem Text="Benchmark Price Post Install" Path="benchmarkprice" />
        </RadzenPanelMenu>
        <RadzenStack AlignItems="Radzen.AlignItems.Center" Gap="0" class="rz-py-4 rz-py-lg-6" Style="padding: var(--rz-panel-menu-item-padding);">
            <RadzenText Text="AutoCAC v1.0.0" TextStyle="Radzen.Blazor.TextStyle.Caption" TagName="Radzen.Blazor.TagName.P" TextAlign="Radzen.TextAlign.Center" />
            <RadzenText Text="Copyright â’¸ 2025" TextStyle="Radzen.Blazor.TextStyle.Caption" class="rz-mb-0" TagName="Radzen.Blazor.TagName.P" TextAlign="Radzen.TextAlign.Center" />
        </RadzenStack>
    </RadzenSidebar>
    @if (isLoading)
    {
        <div class="rz-dialog-wrapper" style="pointer-events: none;">
            <RadzenCard class="rz-dialog" style="min-height: 0; pointer-events: auto;">
                <RadzenRow>
                    <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Primary" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
                    <RadzenText Text="Loading..." TextStyle="TextStyle.DisplayH5"/>
                </RadzenRow>
            </RadzenCard>
        </div>
    }
</RadzenLayout>
@code {
    bool sidebarExpanded = true;    

    void SidebarToggleClick()
    {
        sidebarExpanded = !sidebarExpanded;
    }

    [Inject] public RPMSService RPMS { get; set; }

    public bool isLoading { get; private set; }

    public async Task SetLoading(bool value)
    {
        if (isLoading == value)
            return;
        isLoading = value;
        await Task.Yield();
        await InvokeAsync(StateHasChanged);
    }


    public string username = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            username = authState?.User?.Identity?.Name ?? "";
            TerminalInterop.RPMS = RPMS;
        }
    }

    public void HandleError(Exception ex, bool reThrow = false)
    {
        if (ex == null) return;

        NotificationService.Notify(new NotificationMessage
        {
            Severity = NotificationSeverity.Error,
            Summary = ex.GetType().Name, // "Exception"
            Detail = ex.Message,         // "Could not connect to RPMS."
            Duration = 4000
        });
        StateHasChanged();
        if (reThrow)
        {
            throw ex;
        }
    }

    public async Task<bool?> YesNoDialog(string message = "Are you sure?", string title = "Confirm")
    {
        return await DialogService.Confirm(message, title, new ConfirmOptions
            {
                OkButtonText = "Yes",
                CancelButtonText = "No"
            }
        );
    }

    public bool ReceivingFromRPMS { get; private set; } = false;

    public async Task SetReceivingFromRPMS(bool value)
    {
        if (ReceivingFromRPMS != value)
        {
            ReceivingFromRPMS = value;
            await InvokeAsync(StateHasChanged);
        }
    }

    public async Task Send(params string[] commands)
    {
        // Treat null as a single empty string command
        if (commands == null || commands.Length == 0)
            commands = new[] { "" };
        foreach (var command in commands)
        {
            await RPMS.SendAsync(command);
        }
    }


    public async Task GoToMenu(string menu = null, int attempts = 30)
    {
        try
        {
            for (int i = 0; i < attempts; i++)
            {
                var curPrompt = RPMS.Output.Prompt();
                if (curPrompt.Contains("AutoCAC App Main Menu Option:"))
                {
                    if (menu != null)
                    {
                        await Send(menu);
                    }
                    return;
                }

                if (curPrompt.Contains("Please enter your CURRENT verify code", StringComparison.OrdinalIgnoreCase))
                    throw new Exception("Reset verify code in RPMS");

                if (curPrompt.Contains("return", StringComparison.OrdinalIgnoreCase) ||
                    curPrompt.Contains("do you wish to resume", StringComparison.OrdinalIgnoreCase))
                {
                    await Send();
                }
                else if (curPrompt.Contains("Select DIVISION", StringComparison.OrdinalIgnoreCase))
                {
                    await Send(" ");
                }
                else if (curPrompt.Contains("to stop", StringComparison.OrdinalIgnoreCase) ||
                         curPrompt.Contains("halt?", StringComparison.OrdinalIgnoreCase))
                {
                    await Send("^");
                }
                else if (curPrompt.Contains("Option:"))
                {
                    if (curPrompt.Contains("AutoCAC App Main Menu"))
                    {
                        if (menu != null) 
                        {
                            await Send(menu);
                        }
                        return;
                    }
                    await Send("^AutoCAC App Main Menu");
                }
                else
                {
                    await Send("^");
                }

                if (attempts - i <= 3)
                {
                    await Task.Delay(200); // now async
                }
            }

            throw new Exception("Could not reach main menu. Ask IRM/CAC/Informatics to assign secondary menu option: AutoCAC App Main Menu");
        }
        catch (Exception ex)
        {
            HandleError(ex);
        }
    }

    public async Task ScrollTo(string elementId = "bottom")
    {
        await InvokeAsync(StateHasChanged); // request a UI render
        await Task.Yield();
        if (elementId == "bottom")
        {
            await JS.InvokeVoidAsync("scrollToBottom");
        }
        else if (elementId == "top")
        {
            await JS.InvokeVoidAsync("scrollToTop");
        }
        else
        {
            await JS.InvokeVoidAsync("scrollToElement", elementId);
        }
    }

    public async Task DownloadText(string content, string fileName = "data.txt", string mimeType = "text/plain")
    {
        await JS.InvokeVoidAsync("downloadTextFile", content, fileName, mimeType);
    }

    public async Task ScrollToRPMS()
    {
        await ScrollTo("rpmsOutputTxtDiv");
    }

    /// <summary>
    /// Runs a block of RPMS or app commands with loading UI and error handling.
    /// </summary>
    public async Task RunCommands(Func<Task> action)
    {
        await SetLoading(true);

        try
        {
            await action();
        }
        catch (Exception ex)
        {
            HandleError(ex);
        }
        finally
        {
            await SetLoading(false);
        }
    }

    /// <summary>
    /// Runs a block of RPMS or app commands with loading UI and error handling.
    /// </summary>
    public async Task<T> RunCommands<T>(Func<Task<T>> action)
    {
        await SetLoading(true);

        try
        {
            return await action();
        }
        catch (Exception ex)
        {
            HandleError(ex);
            return default!;
        }
        finally
        {
            await SetLoading(false);
        }
    }

    public string CheckPrompt(StringComparison comparison, params string[] expectedPrompts)
    {
        string prompt = RPMS.Output.Prompt();

        foreach (var expected in expectedPrompts)
        {
            if (prompt.Contains(expected, comparison))
            {
                return expected;
            }
        }
        return null;
    }
    public string CheckPrompt(params string[] expectedPrompts) => CheckPrompt(StringComparison.Ordinal, expectedPrompts);

    public void CheckPromptAndThrow(string expectedPrompt, StringComparison comparison = StringComparison.Ordinal)
    {
        string prompt = RPMS.Output.Prompt();
        if (!prompt.Contains(expectedPrompt, comparison))
        {
            throw new RPMSException();
        }
    }

    public async Task HandlePrompt(
        List<(string Prompt, Func<Task> Action)> promptActions,
        Func<Task> onNoMatch = null,
        StringComparison comparison = StringComparison.Ordinal)
    {
        string prompt = RPMS.Output.Prompt();
        foreach (var (expectedPrompt, action) in promptActions)
        {
            if (prompt.Contains(expectedPrompt, comparison))
            {
                await action();
                return;
            }
        }

        if (onNoMatch is not null)
        {
            await onNoMatch();
        }
        else
        {
            HandleError(new RPMSException());
        }
    }

    public async Task<string> EnterUntil(int maxTries, StringComparison comparison, params string[] prompts)
    {
        for (int i = 0; i < maxTries; i++)
        {
            var curPrompt = CheckPrompt(comparison, prompts);
            if (curPrompt!=null)
            {
                return curPrompt;
            }
            await Send("");
        }
        throw new RPMSException();
    }
    public async Task EnterUntil(params string[] prompts) => await EnterUntil(30, StringComparison.Ordinal, prompts);

    /// <summary>
    /// Repeatedly handles the RPMS prompt and runs the corresponding handler action.
    /// Each handler returns a boolean: true = exit early, false = continue.
    /// </summary>
    /// <param name="maxLoops">Maximum number of prompt iterations.</param>
    /// <param name="handlers">Dictionary of prompt string to handler function.</param>
    /// <returns>Task representing the async operation.</returns>
    /// <example>
    /// await Layout.PromptLoopAsync(new Dictionary<string, Func<Task<bool>>>
    /// {
    ///     ["Yes or No"] = async () => { await Layout.Send("YES"); return true; },
    ///     ["Is this a match "] = async () => { await Layout.Send("YES"); return true; },
    ///     ["Press Return"] = async () => { await Layout.Send(); return false; },
    ///     ["Enter RETURN to continue"] = async () => { await Layout.Send(); return false; },
    ///     [" edit "] = async () => { await Layout.EnterUntil("Enter your choice(s) separated by commas"); return false; },
    ///     ["osages"] = async () => { await Layout.EnterUntil("Enter your choice(s) separated by commas"); return false; }
    /// }, 20);
    /// </example>
    public async Task PromptLoopAsync(Dictionary<string, Func<Task<bool>>> handlers, int maxLoops = 30)
    {
        for (int i = 0; i < maxLoops; i++)
        {
            var prompt = CheckPrompt(handlers.Keys.ToArray());

            if (!handlers.TryGetValue(prompt, out var handler))
                throw new RPMSException();

            bool shouldExit = await handler();
            if (shouldExit)
                return; // exits outer method
        }
        throw new RPMSException();
    }
    public async Task<bool> PromptHandleSend(bool exitLoop, params string[] commands)
    {
        await Send(commands);
        return exitLoop;
    }
}
