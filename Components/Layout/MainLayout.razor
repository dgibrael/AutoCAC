@inherits LayoutComponentBase
@inject CookieThemeService CookieThemeService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService
@inject DialogService DialogService
@using System.Text
@inject IJSRuntime JS
@inject IDbContextFactory<AutoCAC.Models.mainContext> DbFactory
@inject AutoCAC.Services.UserContextService UserContext
@using AutoCAC.Extensions

<CascadingValue Value="this" Name="MainLayout">
    <RadzenComponents />
</CascadingValue>

<RadzenLayout style="grid-template-areas: 'rz-sidebar rz-header' 'rz-sidebar rz-body';">
    <RadzenHeader>
        <RadzenRow JustifyContent="JustifyContent.Start" AlignItems="AlignItems.Center" Gap="0">
            <RadzenColumn Size="5">
                <RadzenSidebarToggle Click="@SidebarToggleClick"></RadzenSidebarToggle>
            </RadzenColumn>
            <RadzenColumn Size="7">
                <RadzenStack AlignItems="AlignItems.Center" Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0.5rem" class="rz-px-2">
                    <RadzenAppearanceToggle />
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
    </RadzenHeader>
    <RadzenBody Expanded="@sidebarExpanded" id="mainContent">
        <RadzenRow class="rz-mx-auto rz-px-4 rz-pt-2 rz-pt-md-4 rz-pt-lg-6 rz-pt-xl-12 rz-pb-2 rz-pb-lg-12" Style="max-width: 1440px;">
            <RadzenColumn Size="12">
                <CascadingValue Value="this" Name="MainLayout">
                    @Body
                </CascadingValue>
            </RadzenColumn>
        </RadzenRow>
    </RadzenBody>
    <RadzenSidebar @bind-Expanded="@sidebarExpanded" style="z-index: 2">
        <RadzenStack AlignItems="Radzen.AlignItems.Center" class="rz-py-4 rz-py-lg-6" Style="padding: var(--rz-panel-menu-item-padding); border-bottom: var(--rz-panel-menu-item-border);">
            <RadzenImage Path="images/logo.png"  style="width: 48px; height: 48px;" AlternateText="Application logo"></RadzenImage>
            <RadzenText Text="AutoCAC" TextStyle="Radzen.Blazor.TextStyle.Subtitle1" class="rz-mb-0" style="color: var(--rz-sidebar-color);" />
        </RadzenStack>
        <RadzenPanelMenu>
            <RadzenPanelMenuItem Text="Home" Path="" Icon="home" />
            @if (UserContext.CurrentUser != null)
            {
                if(UserContext.IsInGroupOrSuperuser("PharmacistSupervisor"))
                {
                    <RadzenPanelMenuItem Text="Drug Files" Icon="pill">
                        <RadzenPanelMenuItem Text="Drug Enter Edit" Path="drugenteredit"  />
                        <RadzenPanelMenuItem Text="Benchmark Price Post Install" Path="benchmarkprice" />
                    </RadzenPanelMenuItem>
                }
                if(UserContext.IsInGroup())
                {
                    <RadzenPanelMenuItem Text="Menu Requests" Path="menubuild" Icon="dashboard" />
                }
            }
        </RadzenPanelMenu>
        <RadzenStack AlignItems="Radzen.AlignItems.Center" Gap="0" class="rz-py-4 rz-py-lg-6" Style="padding: var(--rz-panel-menu-item-padding);">
            <RadzenText Text="AutoCAC v1.0.0" TextStyle="Radzen.Blazor.TextStyle.Caption" TagName="Radzen.Blazor.TagName.P" TextAlign="Radzen.TextAlign.Center" />
            <RadzenText Text="Copyright â’¸ 2025" TextStyle="Radzen.Blazor.TextStyle.Caption" class="rz-mb-0" TagName="Radzen.Blazor.TagName.P" TextAlign="Radzen.TextAlign.Center" />
        </RadzenStack>
    </RadzenSidebar>
    @if (isLoading)
    {
        <div class="rz-dialog-wrapper" style="pointer-events: none;">
            <RadzenCard class="rz-dialog" style="min-height: 0; pointer-events: auto;">
                <RadzenRow>
                    <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Primary" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
                    <RadzenText Text="Loading..." TextStyle="TextStyle.DisplayH5"/>
                </RadzenRow>
            </RadzenCard>
        </div>
    }
</RadzenLayout>
@code {
    bool sidebarExpanded = true;    

    void SidebarToggleClick()
    {
        sidebarExpanded = !sidebarExpanded;
    }

    [Inject] public RPMSService RPMS { get; set; }

    public bool isLoading { get; private set; }

    public async Task SetLoading(bool value)
    {
        if (isLoading == value)
            return;
        isLoading = value;
        await Task.Yield();
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnInitializedAsync()
    {
        await UserContext.InitializeAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            TerminalInterop.RPMS = RPMS;
        }
    }

    public void HandleError(Exception ex, bool reThrow = false)
    {
        if (ex == null) return;

        NotificationService.Notify(new NotificationMessage
        {
            Severity = NotificationSeverity.Error,
            Summary = ex.GetType().Name, // "Exception"
            Detail = ex.Message,         // "Could not connect to RPMS."
            Duration = 4000
        });
        _ = InvokeAsync(StateHasChanged);
        if (reThrow)
        {
            throw ex;
        }
    }

    public async Task GoToMenu(string menu = null, int attempts = 30)
    {
        try
        {
            await RPMS.GoToMenu(menu, attempts);
        }
        catch (Exception ex)
        {
            HandleError(ex);
        }
    }

    public async Task ScrollTo(string elementId = "bottom")
    {
        await InvokeAsync(StateHasChanged); // request a UI render
        await Task.Yield();
        if (elementId == "bottom")
        {
            await JS.InvokeVoidAsync("scrollToBottom");
        }
        else if (elementId == "top")
        {
            await JS.InvokeVoidAsync("scrollToTop");
        }
        else
        {
            await JS.InvokeVoidAsync("scrollToElement", elementId);
        }
    }

    public async Task DownloadText(string content, string fileName = "data.txt", string mimeType = "text/plain")
    {
        await JS.InvokeVoidAsync("downloadTextFile", content, fileName, mimeType);
    }


    /// <summary>
    /// Runs a block of RPMS or app commands with loading UI and error handling.
    /// </summary>
    public async Task RunCommands(Func<Task> action)
    {
        await SetLoading(true);

        try
        {
            await action();
        }
        catch (Exception ex)
        {
            HandleError(ex);
        }
        finally
        {
            await SetLoading(false);
        }
    }

    /// <summary>
    /// Runs a block of RPMS or app commands with loading UI and error handling.
    /// </summary>
    public async Task<T> RunCommands<T>(Func<Task<T>> action)
    {
        await SetLoading(true);

        try
        {
            return await action();
        }
        catch (Exception ex)
        {
            HandleError(ex);
            return default!;
        }
        finally
        {
            await SetLoading(false);
        }
    }

    public async Task HandlePrompt(
        List<(string Prompt, Func<Task> Action)> promptActions,
        Func<Task> onNoMatch = null,
        StringComparison comparison = StringComparison.Ordinal)
    {
        string prompt = RPMS.Output.Prompt();
        foreach (var (expectedPrompt, action) in promptActions)
        {
            if (prompt.Contains(expectedPrompt, comparison))
            {
                await action();
                return;
            }
        }

        if (onNoMatch is not null)
        {
            await onNoMatch();
        }
        else
        {
            HandleError(new RPMSException());
        }
    }

}
