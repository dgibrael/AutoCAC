@using AutoCAC
@using Radzen
@inject LoadDataGridService DataService
@inject IDbContextFactory<AutoCAC.Models.mainContext> Db
<RadzenDropDownDataGrid TValue="int" @ref="grid0"
                        Data="@patients"
                        Count="@count"
                        TextProperty="Name"
                        ValueProperty="Id"
                        AllowFiltering="true"
                        LoadData="@LoadDataAsync"
                        Style="width: 100%;"
                        Value="@Value"
                        ValueChanged="OnValueChanged"
                        ValueExpression="@(()=> Value)"
                        SearchText="@initialFilter"
                        SearchTextChanged="@(t => initialFilter = t)">
    <Columns>
        <RadzenDropDownDataGridColumn Property="ChartNumber" Title="Chart #" />
        <RadzenDropDownDataGridColumn Property="Name" Title="Name" />
    </Columns>
</RadzenDropDownDataGrid>

@code {
    [Parameter] public int Value { get; set; } = 0;
    [Parameter] public EventCallback<int> ValueChanged { get; set; }
    protected RadzenDropDownDataGrid<int> grid0;
    private string initialFilter;
    private bool initialRender = true;

    private async Task OnValueChanged(int v)
    {
        Value = v;
        await ValueChanged.InvokeAsync(v); // forward to parent
    }

    private IEnumerable<AutoCAC.Models.Patient> patients;
    private int count;

    private async Task LoadDataAsync(LoadDataArgs args)
    {
        await using var db = await Db.CreateDbContextAsync();

        var query = db.Patients.AsQueryable();
        if (initialRender && Value!=0)
        {
            initialFilter = await Db.GetFirstValueAsync("Select Name From Patient Where id = @Value", new { Value });
            query = query.Where(x => x.Name.Contains(initialFilter) || x.ChartNumber.Contains(initialFilter));
        }
        else if (!string.IsNullOrWhiteSpace(args.Filter))
        {
            query = query.Where(x => x.Name.Contains(args.Filter) || x.ChartNumber.Contains(args.Filter));
        }
        var result = await DataService.ApplyLoadData(query, args, true, ignoreFilter: true);
        patients = result.Data;
        count = result.Count;
    }
}
