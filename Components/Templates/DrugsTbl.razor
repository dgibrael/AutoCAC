
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService
@inject LoadDataGridService LoadDataGridService
@using AutoCAC.Models
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<AutoCAC.Models.mainContext> DbFactory
@using AutoCAC.Components.Pages
<RadzenStack>
    <RadzenRow>
        <RadzenColumn SizeMD=12>
            <RadzenLabel Text="Show only active" Style="margin-left: 0.5rem;" />
            <RadzenCheckBox TValue="bool" @bind-Value="showOnlyActive" Change="OnShowOnlyActiveChanged" />
            <RadzenDataGrid @ref="grid0" ColumnWidth="200px" AllowPaging="true" 
            ShowPagingSummary="true" PageSizeOptions=@(new int[]{5, 10, 20, 30})
            Data="@(data)" TItem="AutoCAC.Models.Drug" LoadData="@LoadData"
            Count="count" RowSelect="OnRowSelect"
            >
                <Columns>
                    <RadzenDataGridColumn TItem="AutoCAC.Models.Drug" Property="Id" Title="IEN" Width="100px">
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="AutoCAC.Models.Drug" Property="Name" Title="Name">
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="AutoCAC.Models.Drug" Property="DosageForm" Title="Dosage Form">
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="AutoCAC.Models.Drug" Property="DispenseUnit" Title="Dispense Unit">
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="AutoCAC.Models.Drug" Property="DispenseUnitsPerOrderUnit" Title="Qty Units Per Order">
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="AutoCAC.Models.Drug" Property="ApplicationPackage" Title="Application Package">
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="AutoCAC.Models.Drug" Property="Message" Title="Message">
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="AutoCAC.Models.Drug" Property="Strength" Title="Strength">
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="AutoCAC.Models.Drug" Property="Unit" Title="Unit">
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="AutoCAC.Models.Drug" Property="Ndc" Title="Ndc">
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="AutoCAC.Models.Drug" Property="PharmacyOrderableItem" Title="Pharmacy Orderable Item">
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="AutoCAC.Models.Drug" Title="Active" Sortable="false" Filterable="false">
                        <Template Context="drug">
                            @if(drug.InactiveDate == null)
                            {
                                <span>Active</span>
                            }
                            else
                            {
                                <span>Inactive</span>
                            }
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="AutoCAC.Models.Drug" Property="Nf" Title="Nf">
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </RadzenColumn>
    </RadzenRow>
</RadzenStack>
@code {
    [CascadingParameter(Name = "MainLayout")] public MainLayout Layout { get; set; }
    [Parameter] public EventCallback<AutoCAC.Models.Drug> SelectionChanged { get; set; }
    protected IEnumerable<AutoCAC.Models.Drug> data;
    protected RadzenDataGrid<AutoCAC.Models.Drug> grid0;
    protected int count;
    private mainContext context = default!;
    bool? shouldCount = true;
    private Drug selectedRow;
    bool showOnlyActive = true;
    [Parameter] public IQueryable<Drug> InitialQuery { get; set; }

    void OnShowOnlyActiveChanged(bool _)
    {
        shouldCount = true;
        grid0.FirstPage(true); // This triggers LoadData to re-run with updated filter
    }

    protected async Task LoadData(LoadDataArgs args)
    {
        await Layout.SetLoading(true);
        context = DbFactory.CreateDbContext();

        var query = InitialQuery ?? context.Drugs.AsNoTracking();
        if (showOnlyActive)
        {
            query = query.Where(d => d.InactiveDate == null);
        }

        var result = await LoadDataGridService.ApplyLoadData(query, args, shouldCount);
        data = result.Data;
        count = result.Count;
        shouldCount = null;
        await Layout.SetLoading(false);
    }

    private async Task OnRowSelect(Drug selected)
    {
        selectedRow = selected;
        await SelectionChanged.InvokeAsync(selected);
        await InvokeAsync(StateHasChanged);
    }

    protected async Task AddButtonClick(MouseEventArgs args)
    {
        selectedRow = await DialogService.OpenAsync<NewDrug>("New Drug", null);
        await SelectionChanged.InvokeAsync(selectedRow);
        await InvokeAsync(StateHasChanged);
    }

}
