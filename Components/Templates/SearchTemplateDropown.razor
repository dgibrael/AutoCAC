@using Radzen
@using AutoCAC.Models
@inject mainContext Db
@inject AuthenticationStateProvider Auth
@using AutoCAC.Extensions
@inject AutoCAC.Services.UserContextService UserContext
@rendermode InteractiveServer

<RadzenDropDown TValue="DataGridTemplate"
                Data="@templates"
                Value="@selectedTemplate"
                Change="@OnTemplateChanged"
                TextProperty="TemplateName"
                AllowClear="true"
                Placeholder="@Placeholder"
                Style="width: 280px" />

@code {
    [Parameter] public string DataGridName { get; set; }
    [Parameter] public bool IncludeShared { get; set; } = true;
    [Parameter] public string Placeholder { get; set; } = "Search templates...";

    // Optional: initial value
    [Parameter] public DataGridTemplate InitialValue { get; set; }

    // Event raised when user picks/clears a template
    [Parameter] public EventCallback<DataGridTemplate> SelectedTemplateChanged { get; set; }

    private List<DataGridTemplate> templates = [];
    private DataGridTemplate selectedTemplate;

    protected override async Task OnInitializedAsync()
    {
        await LoadTemplates();

        // Apply initial value if supplied and valid
        if (InitialValue is not null)
        {
            selectedTemplate = templates.FirstOrDefault(t => t.Id == InitialValue.Id);
            if (selectedTemplate != null)
                await SelectedTemplateChanged.InvokeAsync(selectedTemplate);
        }
    }

    public async Task LoadTemplates(DataGridTemplate initialSelection = null)
    {
        templates = await Db.GetDataGridTemplatesAsync(DataGridName, UserContext.Username, IncludeShared);

        if (initialSelection != null)
        {
            selectedTemplate = templates.FirstOrDefault(t => t.Id == initialSelection.Id);
            await SelectedTemplateChanged.InvokeAsync(selectedTemplate);
        }
        else if (selectedTemplate?.Id is { } id && !templates.Any(t => t.Id == id))
        {
            await SelectedTemplateChanged.InvokeAsync(null);
        }

        StateHasChanged();
    }


    private async Task OnTemplateChanged(object value)
    {
        selectedTemplate = value as DataGridTemplate;
        await SelectedTemplateChanged.InvokeAsync(selectedTemplate);
    }
}
