@inject NotificationService NotificationService
@inject DialogService DialogService
@inject IDbContextFactory<AutoCAC.Models.mainContext> DbFactory

@typeparam TItem where TItem : class, new()

<DataGridVanilla TItem="TItem"
                 @ref="basegrid"
                 DataGridName="@DataGridName"
                 QueryFactory="@QueryFactory"
                 SearchColumns="@SearchColumns"
                 AddButtonClick="OnAddClick"
                 ExpandContentView="@ExpandContentView" ExpandContentEdit="@ExpandContentEdit"
                 ExpandContentBoth="@ExpandContentBoth"
                 ActionColumnDefault="false">
    <ChildContent>
        @ChildContent
        <RadzenDataGridColumn TItem="TItem" Width="180px" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
            <HeaderTemplate>
                <RadzenIcon Icon="settings" />
            </HeaderTemplate>
            <EditTemplate Context="item">
                @if (RowButtonsEditMode is not null)
                {
                    @RowButtonsEditMode(item)
                }
                @if (DefaultRowButtonsEditMode)
                {
                    <RadzenButton Icon="check" Variant="Variant.Flat" Click="@(() => SaveRowAsync(item))" />
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Click="@(() => CancelRow(item))" />
                }
            </EditTemplate>
            <Template Context="item">
                @if (RowButtonsViewMode is not null)
                {
                    @RowButtonsViewMode(item)
                }
                @if (DefaultRowButtonsViewMode)
                {
                    <RadzenButton Icon="edit" Variant="Variant.Flat" ButtonType="ButtonType.Submit" Click="@(() => EditRow(item))" />
                    <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Click="@(() => DeleteRowAsync(item))" />
                }
            </Template>
        </RadzenDataGridColumn>
    </ChildContent>
</DataGridVanilla>

@code {
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public RenderFragment<TItem> RowButtonsEditMode { get; set; }
    [Parameter] public RenderFragment<TItem> RowButtonsViewMode { get; set; }
    [Parameter] public bool DefaultRowButtonsViewMode { get; set; } = true;
    [Parameter] public bool DefaultRowButtonsEditMode { get; set; } = true;
    [Parameter] public string DataGridName { get; set; }
    [Parameter] public Func<IQueryable<TItem>> QueryFactory { get; set; }
    [Parameter] public Func<Task<TItem>> AddAction { get; set; }
    [Parameter] public EventCallback<TItem> EditButtonClick { get; set; }
    [Parameter] public string[] SearchColumns { get; set; }
    [Parameter] public RenderFragment<TItem> ExpandContentView { get; set; }
    [Parameter] public RenderFragment<TItem> ExpandContentEdit { get; set; }
    [Parameter] public RenderFragment<TItem> ExpandContentBoth { get; set; }

    public DataGridVanilla<TItem> basegrid;
    private readonly HashSet<TItem> _newItems = new();

    public async Task OnAddClick()
    {
        await basegrid.SetQuickFilter();
        TItem newItem;

        if (AddAction is not null)
        {
            newItem = await AddAction.Invoke();
            if (newItem is null) return; // caller handled it (dialog, etc.)
        }
        else
        {
            newItem = new TItem();
        }

        _newItems.Add(newItem);
        await basegrid.grid0.InsertRow(newItem);
        if ((ExpandContentEdit != null || ExpandContentBoth != null) && !basegrid.grid0.IsRowExpanded(newItem))
        {
            await basegrid.grid0.ExpandRow(newItem);
        }
    }

    public async Task EditRow(TItem item)
    {
        if (EditButtonClick.HasDelegate)
        {
            await EditButtonClick.InvokeAsync(item);
        }
        else
        {
            await basegrid.grid0.EditRow(item);
            if ((ExpandContentEdit!=null || ExpandContentBoth!=null) && !basegrid.grid0.IsRowExpanded(item))
            {
                await basegrid.grid0.ExpandRow(item);
            }
        }
    }

    public void CancelRow(TItem item)
    {
        basegrid.grid0.CancelEditRow(item);
        if (_newItems.Remove(item))
            _ = basegrid.ForceReload();
    }

    public async Task SaveRowAsync(TItem item, bool leaveEdit = true)
    {
        try
        {
            if (_newItems.Contains(item))
            {
                await DbFactory.AddItemAsync(item);
                _newItems.Remove(item);
            }
            else
            {
                await DbFactory.UpdateItemAsync(item);
            }
            Notify(NotificationSeverity.Success, "Saved", "Changes successfully saved.");
            if (leaveEdit)
            {
                basegrid.grid0.CancelEditRow(item);
            }
        }
        catch (Exception ex)
        {
            Notify(NotificationSeverity.Error, "Save failed", ex.Message);
        }
    }

    public async Task DeleteRowAsync(TItem item)
    {
        var ok = await DialogService.Confirm("Delete this item?", "Confirm Delete");
        if (ok != true) return;
        await DbFactory.DeleteItemAsync(item);
        Notify(NotificationSeverity.Success, "Deleted", "Item removed.");
        await basegrid.ForceReload();
    }

    private void Notify(NotificationSeverity severity, string summary, string detail)
    {
        NotificationService.Notify(new NotificationMessage
        {
            Severity = severity,
            Summary = summary,
            Detail = detail,
            Duration = 4000
        });
    }
}
