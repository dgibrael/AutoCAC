@typeparam TItem where TItem : class

@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService
@inject AutoCAC.Services.UserContextService UserContext
@inject IDbContextFactory<AutoCAC.Models.mainContext> DbFactory

@using AutoCAC.Models
@using Microsoft.EntityFrameworkCore
@using AutoCAC
@using AutoCAC.Extensions
@using System.Text.Json
@using System.Reflection

<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
    @if (_helper?.SearchColumns != null)
    {
        <RadzenColumn Size="4">
            <QuickSearch @bind-Value="_helper.SearchText" @bind-Value:after="ForceReload" />
        </RadzenColumn>
    }
    @if (!string.IsNullOrEmpty(AddButtonUrl) || AddButtonClick.HasDelegate)
    {
        <RadzenButton Icon="add_circle_outline"
                      Text="Add"
                      ButtonStyle="ButtonStyle.Success"
                      Click="@OnAddClickInternal"
                      Variant="Variant.Flat" />
    }
    @HeaderContent
    <RadzenButton Text="Download" Click="@DownloadTbl" Icon="download" />
    <RadzenSplitButton Text="Save Template" Icon="save"
                       Disabled="@(_helper?.Settings is null)"
                       Click="@(item => SaveGridSettingsClick(item))"
                       ButtonStyle="ButtonStyle.Base">
        <RadzenSplitButtonItem Text="Save Template" Value="private" Icon="account_circle" />
        <RadzenSplitButtonItem Text="Save Public Template" Value="public" Icon="public" />
    </RadzenSplitButton>
    <SearchTemplateDropown DataGridName="@PageName"
                           SelectedTemplateChanged="OnTemplatePicked"
                           Placeholder="Load Saved Template..." />
</RadzenStack>

<RadzenDataGrid @ref="Grid" @bind-Settings="_helper.Settings"
                Data="_helper.Data"
                Count="_helper.Count"
                LoadData="LoadData"
                LoadColumnFilterData="_helper.LoadColumnFilterDataAsync"
                TItem="TItem"
                IsLoading="IsLoading"
                AllowFiltering="true"
                AllowPaging="true"
                PageSize="10"
                AllowSorting="true"
                AllowColumnResize="true"
                AllowColumnReorder="true"
                AllowGrouping="true"
                AllowCompositeDataCells="true"
                AllowColumnPicking="true"
                ShowPagingSummary="true"
                ColumnWidth="200px"
                PageSizeOptions="@(new int[]{5,10,20,30,50})"
                ShowExpandColumn="@(ExpandContentView!=null || ExpandContentEdit!=null || ExpandContentBoth!=null)"
                Context="row"
                RowSelect="@RowSelect">

    <Columns>
        @LeadingColumns?.Invoke(row)
        @if (ActionColumnDefault)
        {
            <DeleteEditColumn Grid="Grid" Context="x" />
        }
        @if (ChildContent is not null)
        {
            @ChildContent
        }
        else if (IncludeColumns is not null && IncludeColumns.Any())
        {
            @foreach (var col in IncludeColumns)
            {
                <RadzenDataGridColumn TItem="TItem" Property="@col" Title="@col" />
            }
        }
        else
        {
            var props = typeof(TItem)
                .GetProperties(BindingFlags.Public | BindingFlags.Instance)
                .Where(p => !ExcludeColumns.Contains(p.Name, StringComparer.OrdinalIgnoreCase));

            @foreach (var prop in props)
            {
                <RadzenDataGridColumn TItem="TItem" Property="@prop.Name" Title="@prop.Name" />
            }
        }
        @TrailingColumns?.Invoke(row)
    </Columns>

    <Template Context="item">
        @ExpandContentView?.Invoke(item)
        @ExpandContentBoth?.Invoke(item)
    </Template>

    <EditTemplate Context="item">
        @ExpandContentEdit?.Invoke(item)
        @ExpandContentBoth?.Invoke(item)
    </EditTemplate>
</RadzenDataGrid>

@code {
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public RenderFragment<TItem> ExpandContentView { get; set; }
    [Parameter] public RenderFragment<TItem> ExpandContentEdit { get; set; }
    [Parameter] public RenderFragment<TItem> ExpandContentBoth { get; set; }
    [Parameter] public RenderFragment<TItem> LeadingColumns { get; set; }
    [Parameter] public RenderFragment<TItem> TrailingColumns { get; set; }
    [Parameter] public RenderFragment HeaderContent { get; set; }
    [Parameter] public string DataGridName { get; set; }
    [Parameter] public EventCallback AddButtonClick { get; set; }
    [Parameter] public EventCallback<TItem> RowSelect { get; set; }
    [Parameter] public string AddButtonUrl { get; set; }
    [Parameter] public bool AddButtonDefault { get; set; } = false;
    [Parameter] public bool ActionColumnDefault { get; set; } = false;
    [Parameter] public List<string> ExcludeColumns { get; set; } = new();
    [Parameter] public IEnumerable<string> IncludeColumns { get; set; }
    [Parameter] public string[] SearchColumns { get; set; }
    [Parameter] public DataGridHelper<TItem> Helper { get; set; }
    [Parameter] public Func<AutoCAC.Models.mainContext, IQueryable<TItem>> QueryFactory { get; set; }
    private string _searchText;
    private bool IsLoading;
    public RadzenDataGrid<TItem> Grid;
    private DataGridHelper<TItem> _helper;
    private TItem row;

    protected override void OnParametersSet()
    {
        if (AddButtonDefault && string.IsNullOrEmpty(AddButtonUrl) && !AddButtonClick.HasDelegate)
            AddButtonUrl = NavigationManager.GetPathWith("new");

        // Use the provided helper or create one
        _helper = Helper ?? new DataGridHelper<TItem>(DbFactory, source: QueryFactory);
        if (SearchColumns is not null) _helper.SearchColumns = SearchColumns;
    }

    public async Task LoadData(LoadDataArgs args)
    {
        IsLoading = true;
        try
        {
            await _helper.LoadAsync(args);
        }
        catch (Exception ex)
        {
            await DialogService.Alert(ex.Message, "Load Error");
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    public async Task DownloadTbl()
    {
        try
        {
            await _helper.DownloadCsvAsync(JSRuntime);
        }
        catch (Exception ex)
        {
            await DialogService.Alert(ex.Message, "Download Error");
        }
    }

    public async Task SetQuickFilter(string filterText = "")
    {
        _helper.SetQuickFilter(filterText);
        await Grid.FirstPage(true);
    }

    public async Task ForceReload()
    {
        _helper.ShouldCount = true;
        await Grid.FirstPage(true);
    }

    private async Task OnAddClickInternal()
    {
        if (AddButtonClick.HasDelegate)
            await AddButtonClick.InvokeAsync();
        else if (!string.IsNullOrEmpty(AddButtonUrl))
            NavigationManager.NavigateTo(AddButtonUrl);
    }

    private string PageName =>
        !string.IsNullOrWhiteSpace(DataGridName)
            ? DataGridName!
            : typeof(TItem).Name;

    public async Task OnTemplatePicked(DataGridTemplate tmpl)
    {
        _helper.LoadedTemplateName = string.IsNullOrWhiteSpace(tmpl?.TemplateName) ? "" : tmpl.TemplateName;
        _helper.Settings = string.IsNullOrWhiteSpace(tmpl?.DataGridSettings)
            ? null
            : JsonSerializer.Deserialize<DataGridSettings>(tmpl.DataGridSettings);
        await Grid.ReloadSettings();
    }

    public async Task SaveGridSettingsClick(RadzenSplitButtonItem item)
    {
        var isPublic = string.Equals(item?.Value?.ToString(), "public", StringComparison.OrdinalIgnoreCase);
        var templates = await _helper.GetTemplateNamesAsync(UserContext.Username);
        var templateName = await DialogService.AutoCompleteDialogAsync(
            _helper.LoadedTemplateName,
            templates,
            isPublic ? "Save Public Search Template" : "Save Search Template"
        );
        if (string.IsNullOrWhiteSpace(templateName))
            return;
        await _helper.SaveTemplate(templateName, UserContext.Username, isPublic);
        NotificationService.Success("Settings successfully saved");

    }
}
