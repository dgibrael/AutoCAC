@typeparam TItem where TItem : class

@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService
@inject LoadDataGridService LoadDataGridService
@using AutoCAC.Models
@using Microsoft.EntityFrameworkCore
@using AutoCAC.Extensions
@inject AutoCAC.Services.UserContextService UserContext
@inject IDbContextFactory<AutoCAC.Models.mainContext> DbFactory
@using System.Text.Json
@using System
@using System.Collections
@using System.ComponentModel
@using System.ComponentModel.DataAnnotations
@using System.Linq
@using System.Reflection

<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
    @if (SearchColumns != null)
    {
    <RadzenColumn Size="4">
        <QuickSearch @bind-Value="_searchText" @bind-Value:after="ForceReload" />
    </RadzenColumn>
        }
    @if (!string.IsNullOrEmpty(AddButtonUrl) || AddButtonClick.HasDelegate)
    {
        <RadzenButton Icon="add_circle_outline"
                        Text="Add" ButtonStyle="ButtonStyle.Success"
                        Click="@OnAddClickInternal"
                        Variant="Variant.Flat" />
    }
    <RadzenButton Text="Download" Click="@DownloadTbl" Icon="download" />
    <RadzenSplitButton Text="Save Template" Icon="save" Disabled="@(Settings is null)" Click="@(item => SaveGridSettingsClick(item))" ButtonStyle="ButtonStyle.Base">
        <RadzenSplitButtonItem Text="Save Template" Value="private" Icon="account_circle" />
        <RadzenSplitButtonItem Text="Save Public Template" Value="public" Icon="public" />
    </RadzenSplitButton>
    <SearchTemplateDropown DataGridName="@PageName" SelectedTemplateChanged="OnTemplatePicked" Placeholder="Load Saved Template..." />
</RadzenStack>
<RadzenDataGrid @ref="grid0" Data="data" Count="count" LoadData="LoadData" IsLoading="IsLoading"
                LoadColumnFilterData="@LoadColumnFilterData" TItem="TItem"
                AllowFiltering="true" AllowPaging="true" PageSize="10" AllowSorting="true" AllowColumnResize="true" 
                AllowColumnReorder="true" ColumnWidth="200px" @bind-Settings="Settings" 
                PageSizeOptions=@(new int[]{5, 10, 20, 30, 50}) 
                AllowGrouping="true"  AllowCompositeDataCells="true"
                AllowColumnPicking="true" ShowPagingSummary="true"
                ShowExpandColumn="@(ExpandContentView!=null || ExpandContentEdit!=null || ExpandContentBoth!=null)"
                Context="row" RowSelect="@RowSelect"
                >
    <Columns>
        @LeadingColumns?.Invoke(row)
        @if (ActionColumnDefault)
        {
            <ActionColumn Grid="grid0" Context="x"/>
        }
        @if (ChildContent is not null)
        {
            @ChildContent
        }
        else if (IncludeColumns is not null && IncludeColumns.Any())
        {
            @foreach (var col in IncludeColumns)
            {
                <RadzenDataGridColumn TItem="TItem"
                                        Property="@col"
                                        Title="@col" />
            }
        }
        else
        {
            var props = typeof(TItem)
            .GetProperties(BindingFlags.Public | BindingFlags.Instance)
            // exclude explicit names first
            .Where(p => !ExcludeColumns.Contains(p.Name, StringComparer.OrdinalIgnoreCase));

            @foreach (var prop in props)
            {
                <RadzenDataGridColumn TItem="TItem"
                                        Property="@prop.Name"
                                        Title="@prop.Name" />
            }
        }
        @TrailingColumns?.Invoke(row)
    </Columns>
    <Template Context="item">
        @if (ExpandContentView is not null)
        {
            @ExpandContentView(item)
        }
        @if (ExpandContentBoth is not null)
        {
            @ExpandContentBoth(item)
        }
    </Template>

    <EditTemplate Context="item">
        @if (ExpandContentEdit is not null)
        {
            @ExpandContentEdit(item)
        }
        @if (ExpandContentBoth is not null)
        {
            @ExpandContentBoth(item)
        }
    </EditTemplate>
</RadzenDataGrid>

@code {
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public RenderFragment<TItem> ExpandContentView { get; set; }
    [Parameter] public RenderFragment<TItem> ExpandContentEdit { get; set; }
    [Parameter] public RenderFragment<TItem> ExpandContentBoth { get; set; }
    [Parameter] public RenderFragment<TItem> LeadingColumns { get; set; }
    [Parameter] public RenderFragment<TItem> TrailingColumns { get; set; }
    [Parameter] public string DataGridName { get; set; }
    [Parameter] public EventCallback AddButtonClick { get; set; }
    [Parameter] public EventCallback<TItem> RowSelect { get; set; }
    [Parameter] public string AddButtonUrl { get; set; }
    [Parameter] public bool AddButtonDefault { get; set; } = false;
    [Parameter] public bool ActionColumnDefault { get; set; } = false;
    private TItem row;
    /// <summary>
    /// Optional: provide a custom base query (e.g., with Includes or tenant scoping).
    /// If null, defaults to DbFactory.QueryFromObj<TItem>().AsNoTracking().
    /// </summary>
    [Parameter] public Func<IQueryable<TItem>> QueryFactory { get; set; }
    [Parameter] public List<string> ExcludeColumns { get; set; } = new();
    [Parameter] public IEnumerable<string> IncludeColumns { get; set; }
    [Parameter] public string[] SearchColumns { get; set; }
    private string _searchText;
    protected IEnumerable<TItem> data;
    protected int count = 0;
    public RadzenDataGrid<TItem> grid0;
    public bool? ShouldCount { get; set; } = true;
    private IQueryable<TItem> lastQry;
    private LoadDataArgs lastArgs;
    DataGridSettings Settings;
    private string loadedTemplateName = "";
    private bool IsLoading { get; set; } = true;
    private ColumnFilterChoices<TItem> _filterChoices;

    protected override void OnParametersSet()
    {
        if (AddButtonDefault && string.IsNullOrEmpty(AddButtonUrl) && !AddButtonClick.HasDelegate)
        {
            AddButtonUrl = NavigationManager.GetPathWith("new");
        }
    }

    public virtual async Task LoadData(LoadDataArgs args)
    {
        IsLoading = true;
        try
        {
            var query = (QueryFactory?.Invoke() ?? DbFactory.QueryFromObj<TItem>())
                .AsNoTracking();
            if (!string.IsNullOrWhiteSpace(_searchText) && SearchColumns?.Length > 0)
                query = query.QuickSearch(_searchText, SearchColumns);
            lastQry = query;
            lastArgs = args;

            var result = await LoadDataGridService.ApplyLoadData(query, args, ShouldCount);
            data = result.Data;
            count = result.Count;
            ShouldCount = null;
        }
        catch (Exception ex)
        {
            await DialogService.Alert(ex.Message, "Load Error");
        }
        finally
        {
            IsLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    public virtual async Task LoadColumnFilterData(DataGridLoadColumnFilterDataEventArgs<TItem> args)
    {
        args.Top = null;
        args.Skip = null;
        if (_filterChoices == null)
        {
            _filterChoices = new ColumnFilterChoices<TItem>(
                () => (QueryFactory?.Invoke() ?? DbFactory.QueryFromObj<TItem>()).AsNoTracking()
            );
        }
        await _filterChoices.GetColumnFilterDataAsync(args);
    }

    public virtual Task DownloadTbl()
    {
        if (count > 100000)
        {
            return DialogService.Alert("Data set too large to download, filter first", "Data Over Limit");
        }
        var args = lastArgs ?? new LoadDataArgs();
        var visibleProps = Settings?.Columns?
            .Where(c => c.Visible)
            .Select(c => c.Property)
            .Where(p => !string.IsNullOrWhiteSpace(p))
            .Distinct()
            .ToList();
        return lastQry.DownloadAsCsvAsync(args, JSRuntime, includeProperties: visibleProps);
    }

    private string PageName =>
        !string.IsNullOrWhiteSpace(DataGridName)
            ? DataGridName!
            : typeof(TItem).Name;

    public virtual async Task OnTemplatePicked(DataGridTemplate tmpl)
    {
        loadedTemplateName = string.IsNullOrWhiteSpace(tmpl?.TemplateName) ? "" : tmpl.TemplateName;
        Settings = tmpl == null || string.IsNullOrWhiteSpace(tmpl.DataGridSettings) ? null : JsonSerializer.Deserialize<DataGridSettings>(tmpl.DataGridSettings);
        await grid0.ReloadSettings();
    }

    public virtual async Task SaveGridSettingsClick(RadzenSplitButtonItem item)
    {
        var isPublic = string.Equals(item?.Value?.ToString(), "public", StringComparison.OrdinalIgnoreCase);

        await using var db = await DbFactory.CreateDbContextAsync();
        var templates = await db.DataGridTemplates
              .AsNoTracking()
              .Where(t => t.DataGridName == PageName && t.CreatedBy == UserContext.Username)
              .Select(t => t.TemplateName)
              .ToListAsync();
        var templateNameObj = await DialogService.OpenAsync<AutoCompleteDialog>(
            isPublic ? "Save Public Search Template" : "Save Search Template",
            parameters: new Dictionary<string, object> { { "Suggestions", templates }, { "Value", loadedTemplateName } });
        var templateName = templateNameObj as string;

        if (string.IsNullOrWhiteSpace(templateName)) return;

        await db.UpsertDataGridTemplate(templateName, PageName, UserContext.Username, Settings, isPublic);
    }

    public async Task SetQuickFilter(string filterText = "")
    {
        _searchText = filterText;
        await ForceReload();
    }

    public async Task ForceReload()
    {
        ShouldCount = true;
        await grid0.FirstPage(true);
    }

    private async Task OnAddClickInternal()
    {
        if (AddButtonClick.HasDelegate)
        {
            await AddButtonClick.InvokeAsync();
        }
        else if (!string.IsNullOrEmpty(AddButtonUrl))
        {
            NavigationManager.NavigateTo(AddButtonUrl);
        }
    }

}