@typeparam TItem where TItem : class
@inject DialogService DialogService
@inject IDbContextFactory<AutoCAC.Models.mainContext> DbFactory
@inject NotificationService Notifications

<RadzenButton Icon="delete"
              ButtonStyle="ButtonStyle.Danger"
              Disabled="@_busy"
              Text="@Text"
              Size="@Size"
              Click="@OnDeleteAsync"
              class="rz-ml-1"
              aria-label="Delete" />

@code {
    [Parameter] public TItem Item { get; set; }
    [Parameter] public EventCallback AfterDelete { get; set; }
    [Parameter] public string Text { get; set; }
    [Parameter] public ButtonSize Size { get; set; } = ButtonSize.Small;
    bool _busy;

    async Task OnDeleteAsync()
    {
        if (_busy || Item is null) return;

        var confirm = await DialogService.DeleteConfirm();

        if (confirm != true) return;

        _busy = true;
        try
        {
            await DbFactory.DeleteItemAsync(Item);
            Notifications.Success("Successfully deleted");
            await AfterDelete.InvokeAsync();
        }
        catch (Exception ex)
        {
            Notifications.Error(ex);
        }
        finally
        {
            _busy = false;
            StateHasChanged();
        }
    }
}
