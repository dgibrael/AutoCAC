@inject AutoCAC.Services.UserContextService UserContext

@switch (isAuthorized)
{
    case null:
        <h4>Loading...</h4>
        break;

    case true:
        @ChildContent
        break;

    case false:
        if (Unauthorized != null)
        {
            @Unauthorized
        }
        else
        {
            <h3 class="text-danger">@GetUnauthorizedMessage()</h3>
        }
        break;
}


@code {
    [Parameter] public IEnumerable<string> Groups { get; set; }

    [Parameter] public RenderFragment ChildContent { get; set; }

    [Parameter] public RenderFragment Unauthorized { get; set; }
    [Parameter] public bool ClinicalUsers { get; set; } = true;
    [Parameter] public bool? IsAuthorized { get; set; }

    private bool? isAuthorized;

    protected override async Task OnInitializedAsync()
    {
        await UserContext.EnsureInitializedAsync();
        if (IsAuthorized != null)
        {
            isAuthorized = IsAuthorized;
        }
        else if (Groups != null)
        {
            isAuthorized = UserContext.IsInGroupOrSuperuser(Groups?.ToArray());
        }
        else
        {
            isAuthorized = ClinicalUsers ? UserContext.IsClinical() : UserContext.IsInGroupOrSuperuser();
        }
        await InvokeAsync(StateHasChanged);
    }
    private string GetUnauthorizedMessage()
    {
        var message = "You are not authorized to view this content. " +
                      "To view this content, you must be listed as an active user";

        if (Groups?.Any() == true)
        {
            var groupList = string.Join(", ", Groups);
            message += $" AND be a member of one of these groups: {groupList}.";
        }

        return message;
    }

}
